{
  "v": "8.0.1",
  "p": {
    "autoAdjustIndex": true,
    "hierarchicalRendering": true
  },
  "a": {
    "rotateAsClock": false,
    "gridBlockSize": 20,
    "connectActionType": null,
    "fitContent": false,
    "zoomable": false,
    "rectSelectable": false,
    "pannable": false
  },
  "d": [
    {
      "c": "ht.Node",
      "i": 38415,
      "p": {
        "name": "阴影边框",
        "displayName": "阴影边框（阴影边框1）",
        "toolTip": "已被布局，不允许拖动",
        "tag": "阴影边框1",
        "dataBindings": {
          "a": {
            "background": {
              "id": "iotos.form",
              "alias": "",
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            }
          }
        },
        "image": "symbols/develop/uiotos/common/阴影边框.json",
        "position": {
          "x": 188.83134,
          "y": -262.73514
        },
        "width": 203.94206,
        "height": 134.39956
      },
      "s": {
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "label.opacity": 0,
        "interactive": true,
        "image.stretch": "uniform",
        "fullscreen.gap": 0,
        "fullscreen": "fill",
        "text": "xxx",
        "2d.movable": false,
        "layout.h": "leftright",
        "layout.v": "topbottom",
        "2d.selectable": false
      },
      "a": {
        "radius": 10,
        "background": "rgb(255,255,255)"
      }
    },
    {
      "c": "ht.Text",
      "i": 38416,
      "p": {
        "displayName": "Text（Text3）",
        "tag": "Text3",
        "dataBindings": {
          "s": {
            "text": {
              "id": "iotos.form",
              "alias": "",
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            }
          }
        },
        "position": {
          "x": 242.4299,
          "y": -239.16199
        },
        "width": 60.86582,
        "height": 14.73147
      },
      "s": {
        "text": "",
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "interactive": true,
        "image.stretch": "uniform",
        "text.color": "rgb(61,61,61)",
        "text.font": "14px arial, sans-serif"
      },
      "a": {
        "origin_width": 21.6888,
        "origin_height": 104.62377
      }
    },
    {
      "c": "ht.UGrid",
      "i": 38417,
      "p": {
        "name": "grid",
        "displayName": "网格组合（grid2）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>已被布局，不允许拖动",
        "tag": "grid2",
        "dataBindings": {
          "a": {
            "datas": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "grid.row.count": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "grid.column.count": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "grid.row.percents": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "grid.auto.fill": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "grid.column.percents": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "grid.gap": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "valueGet": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "itemsGet": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "rowIndex": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "columnIndex": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "removeOthers": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "pureTipText": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popDirection": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBackground": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popPadding": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popHeight": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderColor": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderRadius": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popTriggerEvent": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Fri Jun 07 2024 21:06:26 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image",
              "name": "组件地址",
              "description": "显示组件地址，无需填写。通常仅当公共属性组件源值为对象类型时，组件源属性中原先存放的地址字符串会转存到当前属性上。"
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray",
              "group": "数据",
              "description": "用户数据。\n<br>用于存放任意用户自定义数据。",
              "name": "userData"
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "连线操作和处理回写是否一致。\n                        比如多个文本框连线传值给相同对话框，弹窗修改\n                        后是否限定只能写到最新赋值过来的文本框。详见<a href='https://www.yuque.com/liuhuo-nc809/uiotos/fgi6dd7gado51acm#fFUbp' style=\"color:rgb(96,172,252)\"target=\"_blank\">同源属性操作</a>",
              "name": "useAttrCORS",
              "dynamicCreate": true
            },
            {
              "attr": "display",
              "valueType": "Image",
              "defaultValue": "",
              "description": "自定义页面地址。\n                可以是编辑器中的其他页面，也可以\n                是外部网页链接地址。",
              "group": "弹出框",
              "name": "display",
              "dynamicCreate": true
            },
            {
              "attr": "pureTipText",
              "valueType": "String",
              "defaultValue": "",
              "description": "提示文字。\n                    当专业用户属性中，提供display内嵌页属性，\n                    如果有配置，那么本属性设置无效，将以内嵌\n                    页显示为准。",
              "group": "弹出框",
              "name": "pureTipText",
              "dynamicCreate": true
            },
            {
              "attr": "popDirection",
              "valueType": "SideDirection",
              "defaultValue": "right",
              "description": "提示显示位置。",
              "group": "弹出框",
              "name": "popDirection",
              "dynamicCreate": true
            },
            {
              "attr": "popBackground",
              "valueType": "Color",
              "defaultValue": "white",
              "description": "箭头和背景色。",
              "group": "弹出框",
              "name": "popBackground",
              "dynamicCreate": true
            },
            {
              "attr": "popPadding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                2
              ],
              "description": "内间距。",
              "group": "弹出框",
              "name": "popPadding",
              "dynamicCreate": true
            },
            {
              "attr": "popWidth",
              "valueType": "Number",
              "defaultValue": 400,
              "description": "弹出框宽度。",
              "group": "弹出框",
              "name": "popWidth",
              "dynamicCreate": true
            },
            {
              "attr": "popHeight",
              "valueType": "Number",
              "defaultValue": 300,
              "description": "弹出框高度。",
              "group": "弹出框",
              "name": "popHeight",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,51,51)",
              "description": "边框线颜色。\n                    注意，是设置了边框宽度非0后的边框颜色。\n                    默认边框宽度属性为0时，实际上是白色并\n                    带有箭头指示的边框。本属性不用于修改默\n                    认边框色。",
              "group": "弹出框",
              "name": "popBorderColor",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线宽度。\n                    默认值为0，此时边框默认为白色并且带有\n                    箭头指示。当设置宽度后，颜色将取边框颜\n                    色属性的设置，并且不再有箭头指示。",
              "group": "弹出框",
              "name": "popBorderWidth",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderRadius",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线圆角。\n                    设置圆角线后，如果此前默认是白色边框带有\n                    指示箭头，那么将自动不可见，只对内容区域\n                    产生圆角。",
              "group": "弹出框",
              "name": "popBorderRadius",
              "dynamicCreate": true
            },
            {
              "attr": "popTriggerEvent",
              "valueType": "MouseEvent",
              "defaultValue": "hover",
              "description": "触发方式。\n                支持鼠标移入、点击（按钮时）\n                两种触发提示的方式。",
              "group": "弹出框",
              "name": "popTriggerEvent",
              "dynamicCreate": true
            },
            {
              "attr": "grid.row.count",
              "valueType": "PositiveNumber",
              "defaultValue": 1,
              "group": "外观",
              "description": "网格行数",
              "name": "grid.row.count"
            },
            {
              "attr": "grid.column.count",
              "valueType": "PositiveNumber",
              "defaultValue": 4,
              "description": "网格列数",
              "name": "grid.column.count"
            },
            {
              "attr": "rowIndex",
              "valueType": "Number",
              "description": "指定行索引。\n<br>网格内的组件，选择指定行（rowIndex）、\n<br>列（columnIndex）的用于显示， 其他\n<br>的移除掉。默认值-1相当于未选定。",
              "defaultValue": -1,
              "name": "rowIndex"
            },
            {
              "attr": "columnIndex",
              "valueType": "Number",
              "description": "指定列索引。\n<br>网格内的组件，选择指定行（rowIndex）、\n<br>列（columnIndex）的用于显示，其他\n<br>的移除掉。默认值-1相当于未选定。",
              "defaultValue": -1,
              "name": "columnIndex"
            },
            {
              "attr": "removeOthers",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "是否移出非指定项。\n<br>与指定行（rowIndex）、指定列（columnIndex）配合使用，\n<br>当指定某个行列的项后，是否移除网格内的所有其他项。默\n<br>认不勾选。",
              "name": "removeOthers"
            },
            {
              "attr": "grid.auto.fill",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "增大行或列时，多出的格子是否自动（按照最后一个子组件）进行填充。",
              "name": "grid.auto.fill"
            },
            {
              "attr": "grid.border",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                0,
                0,
                0
              ],
              "description": "网格布局中组件与四周的边距，数组的索引从0到3，\n<br>依次对应上边距、右边距、下边距、左边距。\n<br>更多可参见node.margin.h",
              "name": "grid.border"
            },
            {
              "attr": "grid.gap",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "网格布局中各行与各列统一的间距，\n<br>注意，不包括边距（由grid.border属性决定）。\n<br>更多可参见node.margin.h",
              "name": "grid.gap"
            },
            {
              "attr": "grid.column.percents",
              "valueType": "NumberArray",
              "description": "设置布局的组件中，从左到右每列的宽度。具体数值意义如下：\n<br>● 大于1时，表明绝对像素宽度。比如200，表示当前列宽为200px\n<br>● 等于1时，除去所有设置了绝对宽度以及相应列间距之外，网格组件\n<br>   剩余的总宽度作为当前列宽。\n<br>● 大于0且小于1时，除了绝对像素宽度外和行间距外，剩余总宽度以\n<br>   当前值作为比例对应为当前列宽。比如0.2，剩余宽度总和为100时，\n<br>   当前列宽为20。通常值小数的列，数值相加要为1。\n<br>● 等于0或者undefined未设置值时，默认与其他同样设置了0或未设置\n<br>   参数的列，平分剩余总宽度。比如有4列，当前网格组件总宽度100px，\n<br>   属性设置为[0,40,0,0]时，表明第二列固定宽度为40px，第一、三、四\n<br>   列宽度相同，分别为20（间距、边距相关属性均为0时）。\n<br>● 等于-1时，隐藏当前列（不显示）。注意，如果有多列设置了-1，那么\n<br>   从左到右第一个设置了-1的列才会生效。",
              "name": "grid.column.percents"
            },
            {
              "attr": "grid.row.percents",
              "valueType": "NumberArray",
              "description": "参见列宽百分比属性grid.column.percents，宽度换成高度，\n<br>列换成行即可，值意义可完全参考。注意，网格的子组件\n<br>才能被网格布局。\n<br>\n",
              "name": "grid.row.percents"
            },
            {
              "attr": "node.margin.h",
              "valueType": "Number",
              "defaultValue": 15,
              "description": "列的内容区域与列左右两侧的边距。四周边距（grid.border）、\n<br>内容间距（node.margin.h、node.margin.v）、行列间距（grid.gap）\n<br>之间的区别。当前网格组件的宽度 = \n<br>两边边距（grid.border属性中序号1和3的值） + \n<br>所有列实际展示区域的宽度总和 + \n<br>所有列两边的内容间距（node.margin.h ×2 × 列数）+ \n<br>列之间的间距（grid.gap × (列数 - 1)）",
              "name": "node.margin.h"
            },
            {
              "attr": "node.margin.v",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "行内容区域与行上下两侧的边距。更多可参见node.margin.h",
              "name": "node.margin.v"
            },
            {
              "attr": "borderColor",
              "valueType": "Color",
              "defaultValue": "rgba(55,125,255,0.20)",
              "description": "网格组件边框颜色。",
              "name": "borderColor"
            },
            {
              "attr": "borderWidth",
              "valueType": "Number",
              "defaultValue": 3,
              "description": "网格组件边框宽度。注意，宽度为3时（默认值），\n<br>边框仅编辑状态可见，运行时不可见。其他边框值，\n<br>运行状态也可见。",
              "name": "borderWidth"
            },
            {
              "attr": "background",
              "valueType": "Color",
              "description": "网格组件背景颜色。",
              "name": "background"
            },
            {
              "attr": "onChange",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "defaultValue": "__ht__function(data, gv, cache, value, extra) {}",
              "group": "事件",
              "name": "onChange"
            },
            {
              "attr": "enable",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "开启功能，此时会触发sizeSet属性当前配置生效。",
              "group": "下拉级联",
              "name": "enable"
            },
            {
              "attr": "datas",
              "valueType": "ObjectArray",
              "description": "用于通过网格内下拉框，接收存放多条\n<br>数据记录集，通常为数据库返回结\n<br>果，数组每个对象的字段名称和数\n<br>量通常一致，仅数据不同。",
              "defaultValue": [],
              "name": "datas"
            },
            {
              "attr": "sizeSet",
              "valueType": "PositiveNumber",
              "defaultValue": 0,
              "description": "字段数量设置。设置数值，并且在enable属性开启时，在下发会动态新增\n指定数量的名称为__field_x的字符串类型属性，x标记从0开始，与布局行\n中的组合框从左到右依次对应。\n<br>其中属性值为字段字符串名称。比如当属性__field_2设置为\"name\"时，\n返回数据列表中\"name\"字段的值（去掉重复后的）列表，将被放入到从左\n到右的第3个（从0开始的索引序号为2）组合框中作为下拉选项。\n<br>简言之，sizeSet对应几个字段或者几个组合框；动态属性__field_x名\n称中的x对应哪个组合框，而属性值则为数据字段。\n<br>以此实现动态多个组合框与返回数据的字段依次对应，并且将数据填\n充到各个组合框中作为下拉值并支持级联。",
              "name": "sizeSet"
            },
            {
              "attr": "valueGet",
              "valueType": "Object",
              "description": "当前值。值为被布局的这行组合框各自按照对应的字段\n<br>名称和值构成的json对象。对于原数据（datas属性值）\n<br>中有，但是组合框没有对应的字段，将不会在值中体现。",
              "defaultValue": null,
              "name": "valueGet"
            },
            {
              "attr": "itemsGet",
              "valueType": "Object",
              "description": "当前值（列表），类似valueGet，不过包含了原数据中的所有字段\n<br>（即便有些字段没有对应到组合框），以及满足这些字段值的所有数据集。\n<br>相当于以这一行组合框选定的值作为查询条件，得到满足条件的所有数据\n<br>记录。从这个角度说，valueGet相当于是查询条件本身（字段和值组成的对象\n<br>），itemsGet是查询结果（原始数据满足条件的列表集合）。",
              "defaultValue": null,
              "name": "itemsGet"
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "连线",
              "name": "bindControlsTag"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray",
              "name": "bindControlsAttr"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。",
              "name": "bindControlsVal"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray",
              "name": "paramControlTag"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray",
              "name": "paramControlAttr"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node,oldVal,form,type,inner) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              },
              "name": "paramsGenerator"
            }
          ],
          "snapshotURL": "symbols\\develop\\uiotos\\arranged\\controls\\forms_icon\\网格.json",
          "renderHTML": "__ht__function(data, gv, cache) {return __grid(data,gv,cache);}",
          "width": 100,
          "height": 100,
          "fitSize": true,
          "scrollable": true,
          "pixelPerfect": false,
          "comps": [
            {
              "type": "rect",
              "background": {
                "func": "attr@background",
                "value": null
              },
              "borderWidth": {
                "func": "attr@borderWidth",
                "value": 0
              },
              "borderColor": {
                "func": "attr@borderColor",
                "value": "rgb(55,125,255)"
              },
              "borderWidthAbsolute": true,
              "displayName": "n（n1）",
              "rect": [
                0,
                0,
                100,
                100
              ]
            }
          ],
          "uuid": "5F7D0D8F-87A7-41A6-8BE6-D36C8BA50D0F"
        },
        "host": {
          "__i": 38415
        },
        "position": {
          "x": 188.83134,
          "y": -262.73514
        },
        "width": 182.55011,
        "height": 117.38917
      },
      "s": {
        "label.opacity": 0,
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "grid.gap": 10,
        "grid.column.count": 3,
        "grid.borderRadius": 10,
        "interactive": true,
        "grid.border": -10,
        "grid.column.percents": [
          0,
          1.1,
          0
        ],
        "2d.movable": false,
        "layout.h": "leftright",
        "layout.v": "topbottom"
      },
      "a": {
        "grid.row.count": 1,
        "grid.column.count": 3,
        "grid.border": 0,
        "grid.column.percents": [
          0,
          1.1,
          0
        ],
        "node.margin.h": 0,
        "grid.gap": 10,
        "symbol": "symbols/develop/uiotos/base/grid.json",
        "toolTipRaw": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>已被布局，不允许拖动"
      }
    },
    {
      "c": "ht.Text",
      "i": 38418,
      "p": {
        "displayName": "Text（Text1）",
        "toolTip": "网格内布局的图元不允许拖动",
        "parent": {
          "__i": 38417
        },
        "tag": "Text1",
        "dataBindings": {
          "s": {
            "text": {
              "id": "iotos.form",
              "alias": "",
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            },
            "text.color": {
              "id": "iotos.form",
              "alias": "",
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            }
          }
        },
        "host": {
          "__i": 38417
        },
        "position": {
          "x": 137.91881,
          "y": -262.73514
        },
        "width": 80.72505,
        "height": 117.38917
      },
      "s": {
        "text": "管理面积",
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "interactive": true,
        "image.stretch": "uniform",
        "text.color": "rgb(61,61,61)",
        "text.font": "14px arial, sans-serif",
        "2d.movable": false,
        "layout.h": "left",
        "layout.v": "topbottom",
        "text.align": "center",
        "2d.selectable": false
      },
      "a": {
        "origin_width": 23.49989,
        "origin_height": 109.4675
      }
    },
    {
      "c": "ht.Node",
      "i": 38419,
      "p": {
        "name": "n",
        "displayName": "n（n1）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>网格内布局的图元不允许拖动",
        "parent": {
          "__i": 38417
        },
        "tag": "n1",
        "dataBindings": {
          "s": {
            "shape.gradient.color": {
              "id": "iotos.form",
              "alias": "",
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            }
          }
        },
        "host": {
          "__i": 38417
        },
        "position": {
          "x": 188.83134,
          "y": -262.73514
        },
        "width": 1.1,
        "height": 117.38917
      },
      "s": {
        "shape": "rect",
        "shape.background": "rgba(247,247,247,0)",
        "shape.border.color": "#979797",
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "interactive": true,
        "image.stretch": "uniform",
        "shape.gradient": "spread.vertical",
        "shape.gradient.color": "rgb(55,125,255)",
        "layout.h": "left",
        "layout.v": "topbottom",
        "fullscreen.gap": 0,
        "label.opacity": 0,
        "attach.column.index": 1,
        "2d.movable": false,
        "2d.selectable": false
      },
      "a": {
        "origin_width": 23.49989,
        "origin_height": 109.4675,
        "toolTipRaw": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>网格内布局的图元不允许拖动"
      }
    },
    {
      "c": "ht.UGrid",
      "i": 38420,
      "p": {
        "name": "grid",
        "displayName": "网格组合（grid1）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>网格内布局的图元不允许拖动",
        "parent": {
          "__i": 38417
        },
        "tag": "grid1",
        "dataBindings": {
          "a": {
            "datas": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "grid.row.count": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "grid.column.count": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "grid.row.percents": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "grid.auto.fill": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "grid.column.percents": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "grid.gap": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "valueGet": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "itemsGet": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "rowIndex": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "columnIndex": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "removeOthers": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "pureTipText": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popDirection": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBackground": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popPadding": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popHeight": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderColor": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderRadius": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popTriggerEvent": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Fri Jun 07 2024 21:06:26 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image",
              "name": "组件地址",
              "description": "显示组件地址，无需填写。通常仅当公共属性组件源值为对象类型时，组件源属性中原先存放的地址字符串会转存到当前属性上。"
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray",
              "group": "数据",
              "description": "用户数据。\n<br>用于存放任意用户自定义数据。",
              "name": "userData"
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "连线操作和处理回写是否一致。\n                        比如多个文本框连线传值给相同对话框，弹窗修改\n                        后是否限定只能写到最新赋值过来的文本框。详见<a href='https://www.yuque.com/liuhuo-nc809/uiotos/fgi6dd7gado51acm#fFUbp' style=\"color:rgb(96,172,252)\"target=\"_blank\">同源属性操作</a>",
              "name": "useAttrCORS",
              "dynamicCreate": true
            },
            {
              "attr": "display",
              "valueType": "Image",
              "defaultValue": "",
              "description": "自定义页面地址。\n                可以是编辑器中的其他页面，也可以\n                是外部网页链接地址。",
              "group": "弹出框",
              "name": "display",
              "dynamicCreate": true
            },
            {
              "attr": "pureTipText",
              "valueType": "String",
              "defaultValue": "",
              "description": "提示文字。\n                    当专业用户属性中，提供display内嵌页属性，\n                    如果有配置，那么本属性设置无效，将以内嵌\n                    页显示为准。",
              "group": "弹出框",
              "name": "pureTipText",
              "dynamicCreate": true
            },
            {
              "attr": "popDirection",
              "valueType": "SideDirection",
              "defaultValue": "right",
              "description": "提示显示位置。",
              "group": "弹出框",
              "name": "popDirection",
              "dynamicCreate": true
            },
            {
              "attr": "popBackground",
              "valueType": "Color",
              "defaultValue": "white",
              "description": "箭头和背景色。",
              "group": "弹出框",
              "name": "popBackground",
              "dynamicCreate": true
            },
            {
              "attr": "popPadding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                2
              ],
              "description": "内间距。",
              "group": "弹出框",
              "name": "popPadding",
              "dynamicCreate": true
            },
            {
              "attr": "popWidth",
              "valueType": "Number",
              "defaultValue": 400,
              "description": "弹出框宽度。",
              "group": "弹出框",
              "name": "popWidth",
              "dynamicCreate": true
            },
            {
              "attr": "popHeight",
              "valueType": "Number",
              "defaultValue": 300,
              "description": "弹出框高度。",
              "group": "弹出框",
              "name": "popHeight",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,51,51)",
              "description": "边框线颜色。\n                    注意，是设置了边框宽度非0后的边框颜色。\n                    默认边框宽度属性为0时，实际上是白色并\n                    带有箭头指示的边框。本属性不用于修改默\n                    认边框色。",
              "group": "弹出框",
              "name": "popBorderColor",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线宽度。\n                    默认值为0，此时边框默认为白色并且带有\n                    箭头指示。当设置宽度后，颜色将取边框颜\n                    色属性的设置，并且不再有箭头指示。",
              "group": "弹出框",
              "name": "popBorderWidth",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderRadius",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线圆角。\n                    设置圆角线后，如果此前默认是白色边框带有\n                    指示箭头，那么将自动不可见，只对内容区域\n                    产生圆角。",
              "group": "弹出框",
              "name": "popBorderRadius",
              "dynamicCreate": true
            },
            {
              "attr": "popTriggerEvent",
              "valueType": "MouseEvent",
              "defaultValue": "hover",
              "description": "触发方式。\n                支持鼠标移入、点击（按钮时）\n                两种触发提示的方式。",
              "group": "弹出框",
              "name": "popTriggerEvent",
              "dynamicCreate": true
            },
            {
              "attr": "grid.row.count",
              "valueType": "PositiveNumber",
              "defaultValue": 1,
              "group": "外观",
              "description": "网格行数",
              "name": "grid.row.count"
            },
            {
              "attr": "grid.column.count",
              "valueType": "PositiveNumber",
              "defaultValue": 4,
              "description": "网格列数",
              "name": "grid.column.count"
            },
            {
              "attr": "rowIndex",
              "valueType": "Number",
              "description": "指定行索引。\n<br>网格内的组件，选择指定行（rowIndex）、\n<br>列（columnIndex）的用于显示， 其他\n<br>的移除掉。默认值-1相当于未选定。",
              "defaultValue": -1,
              "name": "rowIndex"
            },
            {
              "attr": "columnIndex",
              "valueType": "Number",
              "description": "指定列索引。\n<br>网格内的组件，选择指定行（rowIndex）、\n<br>列（columnIndex）的用于显示，其他\n<br>的移除掉。默认值-1相当于未选定。",
              "defaultValue": -1,
              "name": "columnIndex"
            },
            {
              "attr": "removeOthers",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "是否移出非指定项。\n<br>与指定行（rowIndex）、指定列（columnIndex）配合使用，\n<br>当指定某个行列的项后，是否移除网格内的所有其他项。默\n<br>认不勾选。",
              "name": "removeOthers"
            },
            {
              "attr": "grid.auto.fill",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "增大行或列时，多出的格子是否自动（按照最后一个子组件）进行填充。",
              "name": "grid.auto.fill"
            },
            {
              "attr": "grid.border",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                0,
                0,
                0
              ],
              "description": "网格布局中组件与四周的边距，数组的索引从0到3，\n<br>依次对应上边距、右边距、下边距、左边距。\n<br>更多可参见node.margin.h",
              "name": "grid.border"
            },
            {
              "attr": "grid.gap",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "网格布局中各行与各列统一的间距，\n<br>注意，不包括边距（由grid.border属性决定）。\n<br>更多可参见node.margin.h",
              "name": "grid.gap"
            },
            {
              "attr": "grid.column.percents",
              "valueType": "NumberArray",
              "description": "设置布局的组件中，从左到右每列的宽度。具体数值意义如下：\n<br>● 大于1时，表明绝对像素宽度。比如200，表示当前列宽为200px\n<br>● 等于1时，除去所有设置了绝对宽度以及相应列间距之外，网格组件\n<br>   剩余的总宽度作为当前列宽。\n<br>● 大于0且小于1时，除了绝对像素宽度外和行间距外，剩余总宽度以\n<br>   当前值作为比例对应为当前列宽。比如0.2，剩余宽度总和为100时，\n<br>   当前列宽为20。通常值小数的列，数值相加要为1。\n<br>● 等于0或者undefined未设置值时，默认与其他同样设置了0或未设置\n<br>   参数的列，平分剩余总宽度。比如有4列，当前网格组件总宽度100px，\n<br>   属性设置为[0,40,0,0]时，表明第二列固定宽度为40px，第一、三、四\n<br>   列宽度相同，分别为20（间距、边距相关属性均为0时）。\n<br>● 等于-1时，隐藏当前列（不显示）。注意，如果有多列设置了-1，那么\n<br>   从左到右第一个设置了-1的列才会生效。",
              "name": "grid.column.percents"
            },
            {
              "attr": "grid.row.percents",
              "valueType": "NumberArray",
              "description": "参见列宽百分比属性grid.column.percents，宽度换成高度，\n<br>列换成行即可，值意义可完全参考。注意，网格的子组件\n<br>才能被网格布局。\n<br>\n",
              "name": "grid.row.percents"
            },
            {
              "attr": "node.margin.h",
              "valueType": "Number",
              "defaultValue": 15,
              "description": "列的内容区域与列左右两侧的边距。四周边距（grid.border）、\n<br>内容间距（node.margin.h、node.margin.v）、行列间距（grid.gap）\n<br>之间的区别。当前网格组件的宽度 = \n<br>两边边距（grid.border属性中序号1和3的值） + \n<br>所有列实际展示区域的宽度总和 + \n<br>所有列两边的内容间距（node.margin.h ×2 × 列数）+ \n<br>列之间的间距（grid.gap × (列数 - 1)）",
              "name": "node.margin.h"
            },
            {
              "attr": "node.margin.v",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "行内容区域与行上下两侧的边距。更多可参见node.margin.h",
              "name": "node.margin.v"
            },
            {
              "attr": "borderColor",
              "valueType": "Color",
              "defaultValue": "rgba(55,125,255,0.20)",
              "description": "网格组件边框颜色。",
              "name": "borderColor"
            },
            {
              "attr": "borderWidth",
              "valueType": "Number",
              "defaultValue": 3,
              "description": "网格组件边框宽度。注意，宽度为3时（默认值），\n<br>边框仅编辑状态可见，运行时不可见。其他边框值，\n<br>运行状态也可见。",
              "name": "borderWidth"
            },
            {
              "attr": "background",
              "valueType": "Color",
              "description": "网格组件背景颜色。",
              "name": "background"
            },
            {
              "attr": "onChange",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "defaultValue": "__ht__function(data, gv, cache, value, extra) {}",
              "group": "事件",
              "name": "onChange"
            },
            {
              "attr": "enable",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "开启功能，此时会触发sizeSet属性当前配置生效。",
              "group": "下拉级联",
              "name": "enable"
            },
            {
              "attr": "datas",
              "valueType": "ObjectArray",
              "description": "用于通过网格内下拉框，接收存放多条\n<br>数据记录集，通常为数据库返回结\n<br>果，数组每个对象的字段名称和数\n<br>量通常一致，仅数据不同。",
              "defaultValue": [],
              "name": "datas"
            },
            {
              "attr": "sizeSet",
              "valueType": "PositiveNumber",
              "defaultValue": 0,
              "description": "字段数量设置。设置数值，并且在enable属性开启时，在下发会动态新增\n指定数量的名称为__field_x的字符串类型属性，x标记从0开始，与布局行\n中的组合框从左到右依次对应。\n<br>其中属性值为字段字符串名称。比如当属性__field_2设置为\"name\"时，\n返回数据列表中\"name\"字段的值（去掉重复后的）列表，将被放入到从左\n到右的第3个（从0开始的索引序号为2）组合框中作为下拉选项。\n<br>简言之，sizeSet对应几个字段或者几个组合框；动态属性__field_x名\n称中的x对应哪个组合框，而属性值则为数据字段。\n<br>以此实现动态多个组合框与返回数据的字段依次对应，并且将数据填\n充到各个组合框中作为下拉值并支持级联。",
              "name": "sizeSet"
            },
            {
              "attr": "valueGet",
              "valueType": "Object",
              "description": "当前值。值为被布局的这行组合框各自按照对应的字段\n<br>名称和值构成的json对象。对于原数据（datas属性值）\n<br>中有，但是组合框没有对应的字段，将不会在值中体现。",
              "defaultValue": null,
              "name": "valueGet"
            },
            {
              "attr": "itemsGet",
              "valueType": "Object",
              "description": "当前值（列表），类似valueGet，不过包含了原数据中的所有字段\n<br>（即便有些字段没有对应到组合框），以及满足这些字段值的所有数据集。\n<br>相当于以这一行组合框选定的值作为查询条件，得到满足条件的所有数据\n<br>记录。从这个角度说，valueGet相当于是查询条件本身（字段和值组成的对象\n<br>），itemsGet是查询结果（原始数据满足条件的列表集合）。",
              "defaultValue": null,
              "name": "itemsGet"
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "连线",
              "name": "bindControlsTag"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray",
              "name": "bindControlsAttr"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。",
              "name": "bindControlsVal"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray",
              "name": "paramControlTag"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray",
              "name": "paramControlAttr"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node,oldVal,form,type,inner) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              },
              "name": "paramsGenerator"
            }
          ],
          "snapshotURL": "symbols\\develop\\uiotos\\arranged\\controls\\forms_icon\\网格.json",
          "renderHTML": "__ht__function(data, gv, cache) {return __grid(data,gv,cache);}",
          "width": 100,
          "height": 100,
          "fitSize": true,
          "scrollable": true,
          "pixelPerfect": false,
          "comps": [
            {
              "type": "rect",
              "background": {
                "func": "attr@background",
                "value": null
              },
              "borderWidth": {
                "func": "attr@borderWidth",
                "value": 0
              },
              "borderColor": {
                "func": "attr@borderColor",
                "value": "rgb(55,125,255)"
              },
              "borderWidthAbsolute": true,
              "displayName": "n（n1）",
              "rect": [
                0,
                0,
                100,
                100
              ]
            }
          ],
          "uuid": "5F7D0D8F-87A7-41A6-8BE6-D36C8BA50D0F"
        },
        "host": {
          "__i": 38417
        },
        "position": {
          "x": 239.74387,
          "y": -262.73514
        },
        "width": 80.72505,
        "height": 117.38917
      },
      "s": {
        "label.opacity": 0,
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "grid.gap": 0,
        "grid.row.count": 4,
        "grid.borderRadius": 10,
        "interactive": true,
        "grid.border": 0,
        "grid.border.top": null,
        "grid.border.right": null,
        "grid.border.bottom": null,
        "grid.border.left": null,
        "grid.column.percents": [],
        "grid.row.percents": [
          0,
          18,
          18,
          0
        ],
        "2d.movable": false,
        "layout.h": "right",
        "layout.v": "topbottom",
        "attach.column.index": 2
      },
      "a": {
        "grid.row.count": 4,
        "grid.column.count": 1,
        "grid.border": [],
        "grid.column.percents": [],
        "grid.row.percents": [
          0,
          18,
          18,
          0
        ],
        "node.margin.h": 0,
        "origin_width": 23.49989,
        "origin_height": 109.4675,
        "symbol": "symbols/develop/uiotos/base/grid.json",
        "toolTipRaw": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>网格内布局的图元不允许拖动"
      }
    },
    {
      "c": "ht.Text",
      "i": 38421,
      "p": {
        "displayName": "Text（Text6'）",
        "toolTip": "网格内布局的图元不允许拖动",
        "parent": {
          "__i": 38420
        },
        "tag": "Text6'",
        "dataBindings": {
          "s": {
            "text": {
              "id": "iotos.form",
              "alias": "",
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            }
          }
        },
        "host": {
          "__i": 38420
        },
        "position": {
          "x": 239.74387,
          "y": -301.08243
        },
        "width": 80.72505,
        "height": 40.69458
      },
      "s": {
        "text": " ",
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "interactive": true,
        "image.stretch": "uniform",
        "text.color": "rgb(61,61,61)",
        "text.font": "14px arial, sans-serif",
        "2d.movable": false,
        "2d.selectable": false
      },
      "a": {
        "origin_width": 70.61351,
        "origin_height": 18
      }
    },
    {
      "c": "ht.Text",
      "i": 38422,
      "p": {
        "displayName": "Text（Text6）",
        "toolTip": "网格内布局的图元不允许拖动",
        "parent": {
          "__i": 38420
        },
        "tag": "Text6",
        "dataBindings": {
          "s": {
            "text": {
              "id": "iotos.form",
              "alias": "",
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            },
            "text.color": {
              "id": "iotos.form",
              "alias": "",
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            }
          }
        },
        "host": {
          "__i": 38420
        },
        "position": {
          "x": 239.74387,
          "y": -271.73514
        },
        "width": 80.72505,
        "height": 18
      },
      "s": {
        "text": "管理面积",
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "interactive": true,
        "image.stretch": "uniform",
        "text.color": "rgb(61,61,61)",
        "text.font": "14px arial, sans-serif",
        "2d.movable": false,
        "attach.row.index": 1,
        "2d.selectable": false,
        "text.align": "center"
      },
      "a": {
        "origin_width": 0.001,
        "origin_height": 21.08846
      }
    },
    {
      "c": "ht.Text",
      "i": 38423,
      "p": {
        "displayName": "Text（Text4）",
        "toolTip": "网格内布局的图元不允许拖动",
        "parent": {
          "__i": 38420
        },
        "tag": "Text4",
        "dataBindings": {
          "s": {
            "text": {
              "id": "iotos.form",
              "alias": "",
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            },
            "text.color": {
              "id": "iotos.form",
              "alias": "",
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            }
          }
        },
        "host": {
          "__i": 38420
        },
        "position": {
          "x": 239.74387,
          "y": -253.73514
        },
        "width": 80.72505,
        "height": 18
      },
      "s": {
        "text": "200㎡",
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "interactive": true,
        "image.stretch": "uniform",
        "text.color": "rgb(61,61,61)",
        "text.font": "14px arial, sans-serif",
        "2d.movable": false,
        "attach.row.index": 2,
        "2d.selectable": false,
        "text.align": "center"
      },
      "a": {
        "origin_width": 0.001,
        "origin_height": 21.08846
      }
    },
    {
      "c": "ht.Text",
      "i": 38424,
      "p": {
        "displayName": "Text（Text5）",
        "toolTip": "网格内布局的图元不允许拖动",
        "parent": {
          "__i": 38420
        },
        "tag": "Text5",
        "dataBindings": {
          "s": {
            "text": {
              "id": "iotos.form",
              "alias": "",
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            }
          }
        },
        "host": {
          "__i": 38420
        },
        "position": {
          "x": 239.74387,
          "y": -224.38785
        },
        "width": 80.72505,
        "height": 40.69458
      },
      "s": {
        "text": " ",
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "interactive": true,
        "image.stretch": "uniform",
        "text.color": "rgb(61,61,61)",
        "text.font": "14px arial, sans-serif",
        "2d.movable": false,
        "attach.row.index": 3,
        "2d.selectable": false
      },
      "a": {
        "origin_width": 70.61351,
        "origin_height": 18
      }
    }
  ],
  "modified": "Mon Jun 17 2024 06:37:19 GMT+0800 (中国标准时间)",
  "contentRect": {
    "x": 24.86031,
    "y": -329.93492,
    "width": 265.94206,
    "height": 134.39956
  }
}