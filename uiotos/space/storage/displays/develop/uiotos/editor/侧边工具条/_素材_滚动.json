{
  "v": "7.7.5",
  "p": {
    "background": "#20252e",
    "autoAdjustIndex": true,
    "hierarchicalRendering": true
  },
  "a": {
    "rotateAsClock": false,
    "gridBlockSize": 20,
    "connectActionType": null,
    "fitContent": false,
    "zoomable": false,
    "rectSelectable": false,
    "pannable": false
  },
  "d": [
    {
      "c": "ht.UNode",
      "i": 182783,
      "p": {
        "name": "scroll",
        "displayName": "滚动页（scroll1）",
        "tag": "scroll1",
        "dataBindings": {
          "a": {
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "autoFillMinWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onScrollEnded": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "userData": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "innerLayoutMode": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bts1>a:select": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bts1>a:buttons": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bts1>a:direction": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bts1>a:initialTrigger": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bts1>a:onChange": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bts1>a:display": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bts1>a:popDirection": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bts1>a:popBackground": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bts1>a:popPadding": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bts1>a:popWidth": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bts1>a:popHeight": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bts1>a:popBorderColor": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bts1>a:popBorderWidth": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bts1>a:popBorderRadius": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bts1>a:popTriggerEvent": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bts1>a:btnData": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bts1>a:_bindEvents_0": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bts1>a:_bindEvents_1": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bts1>p:height": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bus1>a:userData": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bus1>a:addrsRemote": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bus1>a:topicSend": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bus1>a:contentSend": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bus1>a:triggerSend": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bus1>a:callerRemote": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bus1>a:topicRecv": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bus1>a:contentRecv": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bus1>a:waitingRecv": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bus1>a:topicsWhiteList": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bus1>a:addrsWhiteList": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bus1>a:onEvent": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_素材>0>bus1>a:onPostMessage": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Tue Apr 30 2024 16:59:01 GMT+0800 (中国标准时间)",
          "background": "rgb(32,37,46)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image",
              "group": "功能（关键）"
            },
            {
              "attr": "display",
              "valueType": "URL",
              "defaultValue": ""
            },
            {
              "attr": "innerLayoutMode",
              "valueType": "String",
              "description": "内嵌页面的布局模式。\n<br>页面通常分为适配内容（fitContent）\n<br>和全屏填充（fullScreen）两种模式，\n<br>前者自适应缩放以保证所有内容窗口\n<br>范围内可见，后者则是指定某个图元\n<br>组件作为底板全屏填充，其他组件直\n<br>接或简接对于底板布局。\n<br>模式无（none）表示以上两种模式都\n<br>不是，既不缩放适配也不全屏铺满。\n<br>注意，本属性为读写，可以表示当前\n<br>页面的状态，也可以进行设置。其中\n<br>设置全屏填充时，自动选择最底层图\n<br>元组件作为底板。新建页面默认为基\n<br>于有底板的全屏填充布局，而非缩放。\n",
              "extraInfo": {
                "enum": {
                  "values": [
                    "fitContent",
                    "fullScreen",
                    "none"
                  ]
                }
              }
            },
            {
              "attr": "onDisplayLoaded",
              "valueType": "Function",
              "description": "所有内嵌页面逐层加载完毕后回调（注意，作为顶层页面时才会触发）。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache"
                ]
              }
            },
            {
              "attr": "initCallback",
              "valueType": "Function",
              "description": "页面文件加载初始化完毕后的回调，\n<br>注意，不包括渲染元素、内嵌页面\n<br>的加载（参见onDisplayLoaded）。\n<br>参数innerGv为内嵌页面的graphView。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "innerGv"
                ]
              }
            },
            {
              "attr": "reset",
              "valueType": "Level2",
              "defaultValue": 0
            },
            {
              "attr": "isLoadingGet",
              "valueType": "Boolean",
              "description": "是否正在加载。\n<br>正常加载完成后，该属性为false，\n<br>加载未完成时为true。"
            },
            {
              "attr": "enableLoading",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "是否启动加载过渡动画。注意，勾选后，如果资源不存在，可能会导致卡死，过渡动画一直存在。"
            },
            {
              "attr": "shadowBorder",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                0,
                8
              ]
            },
            {
              "attr": "shadowColor",
              "valueType": "Color",
              "defaultValue": "rgba(55,125,255,0.50)"
            },
            {
              "attr": "shadowEnabled",
              "valueType": "Boolean",
              "defaultValue": true
            },
            {
              "attr": "contentMinWidth",
              "valueType": "PositiveNumber",
              "defaultValue": 0
            },
            {
              "attr": "autoFillMinWidth",
              "valueType": "Boolean",
              "defaultValue": true
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "bindControls"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node, oldVal, form, type, inner) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              }
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "属性同源操作。\n                连线操作传递是否限定双方。比如有A/B/C/D/O五个组件，连线操作关系：\n                A→O、B→O、C→O、D→O，以及O→A、O→B、O→C、O→D，总结为\n                A、B、C、D分别与O有往返操作。\n                默认不勾选该属性时，A到D任何一个向O的连线操作，都不会影响到O自身\n                对A到D的下一步操作。勾选了该属性后，那么每次相邻的两次连线交互，\n                则会有同源选择性，比如A→O，下一步则O之会选择到A的操作即O→A。\n                同源操作通常用户多个组件共用一个配置弹窗的情况，比如上述A、B、C、D\n                相当于是四个同类型的组件，而O是公共的属性配置窗口，任何一个比如A点\n                击，可通过O弹窗显示属性，然后修改后将属性值回写到A，且并不会将值给\n                到其他几个组件，即便有连线在。\n                同源操作规则：当连线满足A/B→O.x，且有O.x→A/B时，即前一次组件A连线\n                操作O的x属性，那么，O对外触发且关联x属性值对外时，勾选了本属性同源\n                属性操作的前提下，将只会执行O.x→A，而忽略O.x→B/C等其他非A的图元组\n                件的连线操作。",
              "dynamicCreate": true
            },
            {
              "attr": "useInnerEventsAll",
              "valueType": "Boolean",
              "description": "是否放行内嵌页面的全部事件。\n<br>若勾选，内嵌图元表单类型的事件函数属性，都将派发到\n<br>上层容器图元对外触发连线操作。默认不勾选，上层容器\n<br>图元对外连线反向关联需要指定内嵌图元的具体事件函数\n<br>属性才能触发，否则忽略内嵌图元的事件触发，不会传递\n<br>给上层容器图元对外连线操作。"
            },
            {
              "attr": "onScrollEnded",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              }
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray"
            },
            {
              "attr": "_素材>0>bts1>a:select",
              "name": ".select",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "当前选中的索引。\n<br>可读写。从0开始，第几个按钮当前选中，\n<br>或者设置第几个按钮选中。-1表示都不选中。",
              "group": "_素材>0>bts1"
            },
            {
              "attr": "_素材>0>bts1>a:buttons",
              "name": ".buttons",
              "valueType": "StringArray",
              "defaultValue": [
                "全部素材",
                "常见图标",
                "工具软件",
                "后台管理",
                "音视频",
                "工业设备",
                "大屏装饰",
                "组态图标",
                "其他"
              ],
              "description": "按钮显示文字。",
              "group": "_素材>0>bts1"
            },
            {
              "attr": "_素材>0>bts1>a:direction",
              "name": ".direction",
              "valueType": "String",
              "defaultValue": "vertical",
              "extraInfo": {
                "enum": {
                  "values": [
                    "horizontal",
                    "vertical"
                  ]
                }
              },
              "description": "horizontal：水平按钮组；\nvertical：垂直按钮组。",
              "group": "_素材>0>bts1"
            },
            {
              "attr": "_素材>0>bts1>a:initialTrigger",
              "name": ".initialTrigger",
              "valueType": "Boolean",
              "defaultValue": false,
              "group": "_素材>0>bts1"
            },
            {
              "attr": "_素材>0>bts1>a:onChange",
              "name": ".onChange",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "param",
                  "extra"
                ]
              },
              "group": "_素材>0>bts1"
            },
            {
              "attr": "_素材>0>bts1>a:display",
              "name": ".display",
              "valueType": "Image",
              "defaultValue": "",
              "description": "自定义页面地址。\n                可以是编辑器中的其他页面，也可以\n                是外部网页链接地址。",
              "group": "_素材>0>bts1"
            },
            {
              "attr": "_素材>0>bts1>a:popDirection",
              "name": ".popDirection",
              "valueType": "SideDirection",
              "defaultValue": "bottomLeft",
              "description": "提示显示位置。",
              "group": "_素材>0>bts1"
            },
            {
              "attr": "_素材>0>bts1>a:popBackground",
              "name": ".popBackground",
              "valueType": "Color",
              "defaultValue": "white",
              "description": "箭头和背景色。",
              "group": "_素材>0>bts1"
            },
            {
              "attr": "_素材>0>bts1>a:popPadding",
              "name": ".popPadding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                2
              ],
              "description": "内间距。",
              "group": "_素材>0>bts1"
            },
            {
              "attr": "_素材>0>bts1>a:popWidth",
              "name": ".popWidth",
              "valueType": "Number",
              "defaultValue": 200,
              "description": "弹出框宽度。",
              "group": "_素材>0>bts1"
            },
            {
              "attr": "_素材>0>bts1>a:popHeight",
              "name": ".popHeight",
              "valueType": "Number",
              "defaultValue": 300,
              "description": "弹出框高度。",
              "group": "_素材>0>bts1"
            },
            {
              "attr": "_素材>0>bts1>a:popBorderColor",
              "name": ".popBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,51,51)",
              "description": "边框线颜色。\n                    注意，是设置了边框宽度非0后的边框颜色。\n                    默认边框宽度属性为0时，实际上是白色并\n                    带有箭头指示的边框。本属性不用于修改默\n                    认边框色。",
              "group": "_素材>0>bts1"
            },
            {
              "attr": "_素材>0>bts1>a:popBorderWidth",
              "name": ".popBorderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线宽度。\n                    默认值为0，此时边框默认为白色并且带有\n                    箭头指示。当设置宽度后，颜色将取边框颜\n                    色属性的设置，并且不再有箭头指示。",
              "group": "_素材>0>bts1"
            },
            {
              "attr": "_素材>0>bts1>a:popBorderRadius",
              "name": ".popBorderRadius",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线圆角。\n                    设置圆角线后，如果此前默认是白色边框带有\n                    指示箭头，那么将自动不可见，只对内容区域\n                    产生圆角。",
              "group": "_素材>0>bts1"
            },
            {
              "attr": "_素材>0>bts1>a:popTriggerEvent",
              "name": ".popTriggerEvent",
              "valueType": "MouseEvent",
              "defaultValue": "hover",
              "description": "触发方式。\n                支持鼠标移入、点击（按钮时）\n                两种触发提示的方式。",
              "group": "_素材>0>bts1"
            },
            {
              "attr": "_素材>0>bts1>a:btnData",
              "name": ".btnData",
              "valueType": "Object",
              "defaultValue": "全部素材",
              "description": "当前选中的内容。\n<br>可读写。匹配按钮数据属性（btnDatas），\n<br>当前属性值是对应按钮数据的第几个，则\n<br>第几个按钮选中。\n<br>如果按钮数据没有对应的，则从按钮显示\n<br>文字去匹配。注意，与当前选中索引（sel-\n<br>ected）属性自动保持同步。",
              "group": "_素材>0>bts1"
            },
            {
              "attr": "_素材>0>bts1>a:_bindEvents_0",
              "name": "._bindEvents_0",
              "valueType": "MultiComboBox",
              "defaultValue": "*",
              "description": "连线索引[0]的触发事件过滤器，默认全部通过",
              "group": "_素材>0>bts1"
            },
            {
              "attr": "_素材>0>bts1>a:_bindEvents_1",
              "name": "._bindEvents_1",
              "valueType": "MultiComboBox",
              "defaultValue": "*",
              "description": "连线索引[1]的触发事件过滤器，默认全部通过",
              "group": "_素材>0>bts1"
            },
            {
              "attr": "_素材>0>bts1>p:height",
              "name": ".height",
              "valueType": "Number",
              "defaultValue": 445.72515,
              "extraInfo": null,
              "group": "_素材>0>bts1"
            },
            {
              "attr": "_素材>0>bus1>a:userData",
              "name": ".userData",
              "valueType": "ObjectArray",
              "group": "_素材>0>bus1"
            },
            {
              "attr": "_素材>0>bus1>a:addrsRemote",
              "name": ".addrsRemote",
              "valueType": "ObjectArray",
              "defaultValue": [
                "*"
              ],
              "description": "消息接收方收发器的地址列表，字符串\n格式，可以多个，实现一对多广播发送。\n\n注意，当属性值为空（长度为0）或为默\n认的*时（有一项或多项值设置为*），表\n明是广播消息，所有接收器都会接收到，\n跳过与自身地址的匹配进行下一步处理。",
              "group": "_素材>0>bus1"
            },
            {
              "attr": "_素材>0>bus1>a:topicSend",
              "name": ".topicSend",
              "valueType": "Object",
              "defaultValue": "容器模板-菜单内容",
              "description": "发送的消息主题，任意字符串格式，默认为当前收发器的全局标签（addressLocal自身地址属性也如此）。",
              "group": "_素材>0>bus1"
            },
            {
              "attr": "_素材>0>bus1>a:contentSend",
              "name": ".contentSend",
              "valueType": "Object",
              "defaultValue": "全部素材",
              "description": "发送的内容，可以是字符串、普通js对象，或图元对象。\n如果未设定值，则自动传入当前页面的window全局对象。\n默认数组格式，便于针对同一个主题TOPIC连线\n设置不同数据带不同的信息发送出去。接收器内容接收\n属性也默认是数组格式。",
              "group": "_素材>0>bus1"
            },
            {
              "attr": "_素材>0>bus1>a:triggerSend",
              "name": ".triggerSend",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "执行发送",
              "group": "_素材>0>bus1"
            },
            {
              "attr": "_素材>0>bus1>a:callerRemote",
              "name": ".callerRemote",
              "valueType": "Object",
              "description": "当前消息来源，即发送者，对象格式",
              "group": "_素材>0>bus1"
            },
            {
              "attr": "_素材>0>bus1>a:topicRecv",
              "name": ".topicRecv",
              "valueType": "Object",
              "description": "当前接收到的消息主题，任意字符串格式，\n相当于key。",
              "group": "_素材>0>bus1"
            },
            {
              "attr": "_素材>0>bus1>a:contentRecv",
              "name": ".contentRecv",
              "valueType": "Object",
              "description": "当前接收到的内容，可以是字符串、普通js对象，\n或图元对象。默认数组格式。对应收发器发送内容\n默认数组格式，便于针对同一个主题TOPIC连线\n设置不同数据带不同的信息过来。",
              "group": "_素材>0>bus1"
            },
            {
              "attr": "_素材>0>bus1>a:waitingRecv",
              "name": ".waitingRecv",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "启动监听，等待接收外部发送器\n的数据",
              "group": "_素材>0>bus1"
            },
            {
              "attr": "_素材>0>bus1>a:topicsWhiteList",
              "name": ".topicsWhiteList",
              "valueType": "ObjectArray",
              "defaultValue": [
                "*"
              ],
              "description": "消息主题白名单。当消息目标地址与当前收发器匹配，\n且消息来源地址在白名单内时，再判断消息主题是否\n在白名单内，是则接受，否则丢弃。\n\n注意，当属性值为空（长度为0）或为默认的*时（有\n一项或多项值设置为*），表明不限制主题，所有topic\n的消息都会放行通过白名单。",
              "group": "_素材>0>bus1"
            },
            {
              "attr": "_素材>0>bus1>a:addrsWhiteList",
              "name": ".addrsWhiteList",
              "valueType": "ObjectArray",
              "defaultValue": [
                "*"
              ],
              "description": "消息源地址白名单。当消息目标地址与当前收发器匹配，\n但消息来源地址不在白名单内时，丢弃该消息，也不进行\n主题topic识别。\n\n注意，当属性值为空（长度为0）或为默认的*时（有\n一项或多项值设置为*），表明不限制消息源，所有来源的\n消息都会放行通过白名单。",
              "group": "_素材>0>bus1"
            },
            {
              "attr": "_素材>0>bus1>a:onEvent",
              "name": ".onEvent",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "form",
                  "extra"
                ]
              },
              "description": "收到总线事件消息。",
              "group": "_素材>0>bus1"
            },
            {
              "attr": "_素材>0>bus1>a:onPostMessage",
              "name": ".onPostMessage",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "form",
                  "extra"
                ]
              },
              "description": "收到跨网页iframe事件消息。",
              "group": "_素材>0>bus1"
            }
          ],
          "renderHTML": "__ht__function(data, gv, cache) {return __scrollAreaView_ui(data,gv,cache);}",
          "width": 819,
          "height": 600,
          "pixelPerfect": false,
          "comps": [],
          "uuid": "52E2670B-75B2-4B05-B534-EC35B5E4BA6A"
        },
        "position": {
          "x": 467.83087,
          "y": 281.28339
        },
        "width": 60.12898,
        "height": 722.29236
      },
      "s": {
        "label.opacity": 0,
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "2d.movable": false,
        "interactive": true,
        "image.stretch": "uniform",
        "fullscreen": "fill",
        "fullscreen.gap": 0
      },
      "a": {
        "symbol": "symbols/develop/uiotos/base/scrollAreaView-ui.json",
        "display": "./_素材.json",
        "shadowEnabled": false,
        "__loadingStatus": false,
        "isLoadingGet": false,
        "contentMinWidth": 60,
        "innerLayoutMode": "fullScreen",
        "_素材>0>bts1>a:select": 0,
        "_素材>0>bts1>a:buttons": [
          "全部素材",
          "常见图标",
          "工具软件",
          "后台管理",
          "音视频",
          "工业设备",
          "大屏装饰",
          "组态图标",
          "其他"
        ],
        "_素材>0>bts1>a:direction": "vertical",
        "_素材>0>bts1>a:initialTrigger": false,
        "_素材>0>bts1>a:display": "",
        "_素材>0>bts1>a:popDirection": "bottomLeft",
        "_素材>0>bts1>a:popBackground": "white",
        "_素材>0>bts1>a:popPadding": [
          2,
          2,
          2,
          2
        ],
        "_素材>0>bts1>a:popWidth": 200,
        "_素材>0>bts1>a:popHeight": 300,
        "_素材>0>bts1>a:popBorderColor": "rgb(51,51,51)",
        "_素材>0>bts1>a:popBorderWidth": 0,
        "_素材>0>bts1>a:popBorderRadius": 0,
        "_素材>0>bts1>a:popTriggerEvent": "hover",
        "_素材>0>bts1>a:btnData": "全部素材",
        "_素材>0>bts1>a:_bindEvents_0": "*",
        "_素材>0>bts1>a:_bindEvents_1": "*",
        "_素材>0>bts1>p:height": 445.72515,
        "_素材>0>bus1>a:addrsRemote": [
          "*"
        ],
        "_素材>0>bus1>a:topicSend": "容器模板-菜单内容",
        "_素材>0>bus1>a:contentSend": "全部素材",
        "_素材>0>bus1>a:triggerSend": false,
        "_素材>0>bus1>a:waitingRecv": true,
        "_素材>0>bus1>a:topicsWhiteList": [
          "*"
        ],
        "_素材>0>bus1>a:addrsWhiteList": [
          "*"
        ]
      }
    }
  ],
  "modified": "Wed May 08 2024 08:04:01 GMT+0800 (中国标准时间)",
  "contentRect": {
    "x": 395.76443,
    "y": -79.86279,
    "width": 102.13093,
    "height": 722.29236
  }
}