{
  "v": "7.7.5",
  "p": {
    "autoAdjustIndex": true,
    "hierarchicalRendering": true
  },
  "a": {
    "rotateAsClock": false,
    "gridBlockSize": 20,
    "connectActionType": null,
    "fitContent": false,
    "zoomable": false,
    "pannable": false,
    "rectSelectable": false,
    "onPostDeserialize": "__ht__function(json, dm, gv, datas) {}"
  },
  "d": [
    {
      "c": "ht.Node",
      "i": 37436,
      "p": {
        "name": "base",
        "displayName": "底板（_base）",
        "tag": "_base",
        "position": {
          "x": 180.44798,
          "y": 40.56606
        },
        "width": 360.89596,
        "height": 81.13212
      },
      "s": {
        "label.opacity": 0,
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "shape": "rect",
        "shape.background": "rgb(255,255,255)",
        "fullscreen": "fill",
        "fullscreen.gap": 0,
        "2d.movable": false,
        "interactive": true,
        "2d.selectable": false
      }
    },
    {
      "c": "ht.Node",
      "i": 29254,
      "p": {
        "name": "input",
        "displayName": "输入框（input-ui1）",
        "tag": "input-ui1",
        "dataBindings": {
          "a": {
            "labelText": {
              "id": "iotos.form",
              "func": "__ht__function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            },
            "value": {
              "id": "iotos.form",
              "func": "__ht__function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            },
            "instantTrigger": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onChange": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "initialTrigger": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onEnter": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "readOnly": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popDirection": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBackground": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popPadding": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popHeight": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderColor": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderRadius": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popTriggerEvent": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Mon Apr 15 2024 05:22:25 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image",
              "group": "功能（关键）",
              "description": "组件源（备选）。\n<br>当组件源（image）为非字符串格式，显示\n<br>[Object]时，可以通过这里备选地址，双击\n<br>打开组件配置。"
            },
            {
              "attr": "fixedHeight",
              "valueType": "PositiveNumber",
              "defaultValue": 35,
              "description": "固定高度。\n<br>部分组件比如下拉框以及这里的输入框，拖拽或布局时，\n<br>高度默认会保持不变，只是宽度能够变化。高度可以在\n<br>当前页面全局自定义，也能通过当前属性对当个组件设\n<br>定。全局设置为页面的公共属性组中的“组件默认固定高\n<br>度”属性。"
            },
            {
              "attr": "activeBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,153,255)",
              "description": "激活时边框颜色。\n<br>通常是选中输入状态时的边框色。"
            },
            {
              "attr": "background",
              "valueType": "Color",
              "description": "背景颜色。"
            },
            {
              "attr": "readOnlyBackground",
              "valueType": "Color",
              "defaultValue": "rgb(247,247,247)",
              "description": "只读时的背景颜色。\n<br>注意，区别于禁用（暂未开放配置）。"
            },
            {
              "attr": "iconPath",
              "valueType": "Image",
              "defaultValue": "symbols/demo/uiotos/icons/light/search.json",
              "description": "图标地址。\n<br>输入框默左侧为“搜索”图标。"
            },
            {
              "attr": "iconColor",
              "valueType": "Color",
              "defaultValue": "rgb(213,213,213)",
              "description": "输入框图标颜色。\n<br>对于内置部件中通过工具转换成的图标，\n<br>为支持动态修改背景颜色的矢量形式。"
            },
            {
              "attr": "iconType",
              "valueType": "Level",
              "defaultValue": 1,
              "description": "图标类型。\n<br>相同名称图标的不同风格，已弃用，\n<br>当前属性目前作为备用。"
            },
            {
              "attr": "iconSize",
              "valueType": "NumberArray",
              "defaultValue": [
                20,
                15
              ],
              "description": "图标尺寸。\n<br>数组形式，索引依次为宽度、高度值。"
            },
            {
              "attr": "iconTextGap",
              "valueType": "Number",
              "defaultValue": 5,
              "description": "图标文字间距。"
            },
            {
              "attr": "hoverIcon",
              "valueType": "Image",
              "description": "鼠标滑过时的图标。"
            },
            {
              "attr": "borderRadius",
              "valueType": "Number",
              "defaultValue": 3,
              "description": "边框圆角。"
            },
            {
              "attr": "borderWidth",
              "valueType": "Number",
              "defaultValue": 1,
              "description": "边框宽度。"
            },
            {
              "attr": "borderColor",
              "valueType": "Color",
              "defaultValue": "rgb(213,213,213)",
              "description": "边框颜色。"
            },
            {
              "attr": "font",
              "valueType": "Font",
              "description": "字体。"
            },
            {
              "attr": "readOnly",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "是否只读。"
            },
            {
              "attr": "placeholder",
              "valueType": "Object",
              "defaultValue": "请输入",
              "description": "未输入时默认占位符文字。"
            },
            {
              "attr": "color",
              "valueType": "Color",
              "defaultValue": "rgb(0,0,0)",
              "description": "文字颜色。"
            },
            {
              "attr": "labelColor",
              "valueType": "Color",
              "defaultValue": "rgb(0,0,0)",
              "description": "标签文字颜色。"
            },
            {
              "attr": "labelText",
              "valueType": "String",
              "defaultValue": "标签",
              "description": "标签文字。"
            },
            {
              "attr": "gap",
              "valueType": "PositiveNumber",
              "defaultValue": 0,
              "description": "标签与组件的间距。\n<br>注意，仅在标签内嵌模式（layoutVertical）下，\n<br>改配置参数才有用。"
            },
            {
              "attr": "layoutVertical",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "标签与组件的布局模式。\n<br>水平左右，或者垂直上下。"
            },
            {
              "attr": "labelEmbeded",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "标签是否内嵌。\n<br>不内嵌时，组件的宽度不包含标签。\n<br>选择内嵌时，组件的宽度包含标签文字宽度。"
            },
            {
              "attr": "type",
              "valueType": "FormType",
              "defaultValue": "text",
              "description": "输入框表单类型。\n<br>包括密码、文本等类型。"
            },
            {
              "attr": "instantTrigger",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "是否即时触发。\n<br>勾选后，输入时就会对外触发onChange变化事件。"
            },
            {
              "attr": "initialTrigger",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "初始触发连线操作。\n<br>默认不勾选，勾选后初始加载值时，如果对外有连线，\n<br>并且初始值为非空时，也会触发对外的赋值连线操作。"
            },
            {
              "attr": "emptyTrigger",
              "valueType": "Boolean",
              "defaultValue": false
            },
            {
              "attr": "value",
              "valueType": "Object",
              "defaultValue": "",
              "description": "当前值。\n<br>输入框的值。注意，运行时输入数字\n<br>默认会作为字符串。如果初始设定值\n<br>为数字类型（比如0），那么输入的字\n<br>符串形式的数字，会被转成数字。"
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "bindControls",
              "description": "操作的目标组件（标签）。\n<br>连线A → B，那么B就是目标组件。"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray",
              "description": "操作目标组件的属性。\n<br>比如A.x→B.y时，x就是当前的关联\n<br>属性，y即为操作属性，A的x属性值\n<br>通过连线赋值给B的y属性。"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray",
              "description": "操作关联的来源组件（标签）。\n<br>连线A → B，那么A就是来源组件。\n<br>注意，为空不用填或者填写A的标\n<br>签效果一样，也可以填入其他组件\n<br>的标签（非正常操作）。"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray",
              "description": "关联属性。\n<br>关联的来源组件的指定属性，比如\n<br>A.x→B.y时，x就是当前的关联属性，\n<br>y为操作属性，A的x属性值通过连线\n<br>赋值给B的y属性。"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node,oldVal,form) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form"
                ]
              },
              "description": "操作过滤函数。\n<br>所有连线对外操作执行之前，都会经过该函数\n<br>过滤处理，通常无需操作。可以做自定义逻辑。\n<br>其中对相应索引index下直接return返回undefined\n<br>时，将忽略掉指定索引连线的执行触发。"
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "属性同源操作。\n                连线操作传递是否限定双方。比如有A/B/C/D/O五个组件，连线操作关系：\n                A→O、B→O、C→O、D→O，以及O→A、O→B、O→C、O→D，总结为\n                A、B、C、D分别与O有往返操作。\n                默认不勾选该属性时，A到D任何一个向O的连线操作，都不会影响到O自身\n                对A到D的下一步操作。勾选了该属性后，那么每次相邻的两次连线交互，\n                则会有同源选择性，比如A→O，下一步则O之会选择到A的操作即O→A。\n                同源操作通常用户多个组件共用一个配置弹窗的情况，比如上述A、B、C、D\n                相当于是四个同类型的组件，而O是公共的属性配置窗口，任何一个比如A点\n                击，可通过O弹窗显示属性，然后修改后将属性值回写到A，且并不会将值给\n                到其他几个组件，即便有连线在。\n                同源操作规则：当连线满足A/B→O.x，且有O.x→A/B时，即前一次组件A连线\n                操作O的x属性，那么，O对外触发且关联x属性值对外时，勾选了本属性同源\n                属性操作的前提下，将只会执行O.x→A，而忽略O.x→B/C等其他非A的图元组\n                件的连线操作。",
              "dynamicCreate": true
            },
            {
              "attr": "onChange",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value"
                ]
              },
              "description": "变化事件函数。\n<br>默认为内容改变才触发，当勾选即时触发\n<br>（instantTrigger）时，输入时就会触发本\n<br>事件。"
            },
            {
              "attr": "onEnter",
              "valueType": "Function",
              "description": "回车事件。\n<br>输入完毕后回车触发，并且传入当前值。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value"
                ]
              }
            },
            {
              "attr": "userData",
              "valueType": "Object"
            },
            {
              "attr": "display",
              "name": "display",
              "valueType": "Image",
              "defaultValue": "",
              "description": "自定义页面地址。\n                可以是编辑器中的其他页面，也可以\n                是外部网页链接地址。",
              "group": "弹出框",
              "dynamicCreate": true
            },
            {
              "attr": "popDirection",
              "name": "popDirection",
              "valueType": "SideDirection",
              "defaultValue": "right",
              "description": "提示显示位置。",
              "dynamicCreate": true
            },
            {
              "attr": "popBackground",
              "name": "popBackground",
              "valueType": "Color",
              "defaultValue": "white",
              "description": "箭头和背景色。",
              "dynamicCreate": true
            },
            {
              "attr": "popPadding",
              "name": "padding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                2
              ],
              "description": "内间距。",
              "dynamicCreate": true
            },
            {
              "attr": "popWidth",
              "name": "popWidth",
              "valueType": "Number",
              "defaultValue": 400,
              "description": "弹出框宽度。",
              "dynamicCreate": true
            },
            {
              "attr": "popHeight",
              "name": "popHeight",
              "valueType": "Number",
              "defaultValue": 300,
              "description": "弹出框高度。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderColor",
              "name": "popBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,51,51)",
              "description": "边框线颜色。\n                    注意，是设置了边框宽度非0后的边框颜色。\n                    默认边框宽度属性为0时，实际上是白色并\n                    带有箭头指示的边框。本属性不用于修改默\n                    认边框色。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderWidth",
              "name": "popBorderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线宽度。\n                    默认值为0，此时边框默认为白色并且带有\n                    箭头指示。当设置宽度后，颜色将取边框颜\n                    色属性的设置，并且不再有箭头指示。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderRadius",
              "name": "popBorderRadius",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线圆角。\n                    设置圆角线后，如果此前默认是白色边框带有\n                    指示箭头，那么将自动不可见，只对内容区域\n                    产生圆角。",
              "dynamicCreate": true
            },
            {
              "attr": "popTriggerEvent",
              "name": "popTriggerEvent",
              "valueType": "MouseEvent",
              "defaultValue": "hover",
              "description": "触发方式。\n                支持鼠标移入、点击（按钮时）\n                两种触发提示的方式。",
              "dynamicCreate": true
            }
          ],
          "snapshotURL": "symbols/admin/uiotos/icons/snapshot/input.json",
          "renderHTML": "__ht__function(data, gv, cache) {return __input_ui(data, gv, cache);}",
          "width": 180,
          "height": 35,
          "scrollable": true,
          "interactive": true,
          "pixelPerfect": false,
          "comps": [],
          "uuid": "E5575451-F622-4A0D-BD89-96C2949F8A05"
        },
        "position": {
          "x": 180.44798,
          "y": 41.78109
        },
        "width": 326.39263,
        "height": 35
      },
      "s": {
        "interactive": true,
        "image.stretch": "uniform",
        "label.opacity": 0,
        "fullscreen.gap": 18
      },
      "a": {
        "layoutVertical": false,
        "gap": 0,
        "font": "12px sans-serif, Arial",
        "iconPath": "symbols/demo/uiotos/icons/light/search.json",
        "value": null,
        "color": "rgb(0,0,0)",
        "labelEmbeded": true,
        "bindEvents": [
          "*",
          "onChange",
          "onClear",
          "onEnter"
        ],
        "symbol": "symbols/develop/uiotos/base/input-ui.json",
        "labelText": "",
        "borderWidth": 1,
        "borderRadius": 3
      }
    }
  ],
  "modified": "Thu May 16 2024 11:16:17 GMT+0800 (中国标准时间)",
  "contentRect": {
    "x": -40.02148,
    "y": 0,
    "width": 400.91744,
    "height": 81.13212
  }
}