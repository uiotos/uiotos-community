{
  "v": "7.7.2",
  "p": {
    "background": "#20252e",
    "autoAdjustIndex": true,
    "hierarchicalRendering": true
  },
  "a": {
    "rotateAsClock": false,
    "gridBlockSize": 20,
    "connectActionType": null,
    "fitContent": true,
    "zoomable": false,
    "rectSelectable": false,
    "pannable": false
  },
  "d": [
    {
      "c": "ht.Node",
      "i": 55483,
      "p": {
        "name": "func",
        "displayName": "工具函数（判断）",
        "toolTip": "透明传递<br>transfer",
        "tag": "判断",
        "dataBindings": {
          "a": {
            "userData": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "output": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "inputs": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        console.error(i.ify(rawData))\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}",
              "alias": ""
            },
            "exec": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "arrExec": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onOutput": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_target": {
              "id": "iotos.form",
              "alias": "",
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            },
            "noteTips": {
              "id": "iotos.form",
              "alias": "",
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            },
            "_equalTo": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_falseReturn": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_trueReturn": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_bindEvents_1": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Mon Nov 06 2023 22:33:27 GMT+0800 (中国标准时间)",
          "background": "rgb(32,37,46)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image",
              "name": "组件地址"
            },
            {
              "attr": "color",
              "valueType": "Color",
              "defaultValue": "rgb(51,153,255)",
              "description": "图标颜色。\n<br>包括显示文字。",
              "group": "功能（关键）",
              "name": "图标颜色"
            },
            {
              "attr": "function",
              "valueType": "ToolFunction",
              "defaultValue": "transfer",
              "name": "功能选项",
              "description": "无"
            },
            {
              "attr": "noteTips",
              "valueType": "Multiline",
              "name": "文字显示注释",
              "description": "简短文字注释。\n<br>默认为函数名称，可以修改，方便理解具体用途。\n<br>通常结合“提示”属性，整体来注释当前的操作。"
            },
            {
              "attr": "exeWhenInput",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "输入赋值时执行"
            },
            {
              "attr": "resetAfterInput",
              "valueType": "Boolean",
              "name": "输入赋值后清空",
              "description": "勾选后，每次输入值有更新，在触发下一步（如果有勾选输入时执行）后，同时复位清空输入属性\n的值，确保下一次再输入同样内容时也能按照变化处理触发执行。注意，再多条连线操作inputs输入\n的不同索引index时，该属性不能勾选，否则无法实现多个值连线（异步先后）赋值传入。",
              "defaultValue": false
            },
            {
              "attr": "inputsArrToObj",
              "valueType": "Boolean",
              "name": "输入数组转对象",
              "description": "是否切换成对象格式。\n<br>输入组（inputs）默认为数组格式，当前属性勾选时\n<br>会将输入组切换成非数组的对象格式，再次取消勾选\n<br>时，会恢复成数组格式。\n<br>\n切换成对象，主要是为了连线操作时，能对初始的非\n<br>数组属性值进行操作，这对于数组取自身索引值对外\n<br>赋值时有用，否则会因为操作数组类型属性值，导致\n<br>被识别为操作目标数组的索引进行赋值。"
            },
            {
              "attr": "exeWhenLoad",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "组件加载时执行"
            },
            {
              "attr": "oldValueMerge",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "输出合并非覆盖",
              "description": "对被操作的属性值做追加而不是覆盖替换。\n<br>被操作属性值作为旧值，按照值类型（数值、字符串、数组、对象等）追加分为以下\n<br>情况：\n<br>1）如果被赋值的（要操作的旧值）为数组类型，通常会将当前值追加过去而不是覆盖；\n<br>工具函数的输入组（inputs）属性例外，在旧值为空数组或者长度为1的数组时，会被当\n<br>做空值或者以唯一哪个元素的值作为当前的旧值，不当做数组类型的操作来追加。\n<br>2）被赋值的为空（注意，并非0、空字符串等\"空\"值）时，输入（组）中一个或多个输\n<br>入项，会合并成一个值输出。其中，合并取决于输入组的类型（输入组多个值中类型数\n<br>量最多的被认为是当前输入组的值类型），具体如下:\n<br>    ■ 数字：输入组各项强制转换成数值并相加，将结果输出；\n<br>    ■ 字符串：输入组各项转成字符串依次拼接形成新的字符串输出；\n<br>    ■ 布尔型：输入组的各项转换成布尔然后做并集（或）后逻辑结果输出；\n<br>    ■ 对象：输入组各项被当成对象，然后字段合并成新对象后输出；\n<br>强制转换这里需注意：\n<br>    ■ 非空字符串转数值时，除了\"true\"（大小写均可）会作为1，其他字符串会作为0；\n<br>3）被赋值的不为空，有具体类型时，比如数字、字符串、布尔、对象类型，此时输入\n<br>组各项值，不再按照类型的多数（如果存在多个输入项）来强制转换少数输入项，而是\n<br>统一按照操作赋值的旧值类型，来转换输入的各项，并且按照类型类自动选择合适的合\n<br>并方式（如上），生成结果来赋值。\n<br>    ○ 注意1：多项输入和旧值会参与一起做合并操作，并非仅仅输入组的各项之间进行。\n<br>    ○ 注意2：如果输入值并非数组，会作当成输入组且元素个数为1的情况来处理。"
            },
            {
              "attr": "inputs",
              "valueType": "ObjectArray",
              "name": "输入（组）",
              "defaultValue": [],
              "description": "用于接收函数参数输入，默认为数组格式，可以设置多个入参。\n<br>外部可以多条连线操作该属性，利用数组操作特性，在各自的连线操作\n<br>中bindControlsVal中设置对应的索引值，用来指定传入输入数组中指定\n<br>值，实现多参数传入。\n<br>\n注意，对于透明传递不做任何业务逻辑处理时，默认会将输入组的值直接输\n<br>出，默认以空（undefined）对外操作赋值，通常用于对外清空值。\n<br>此外，输入组长度为1时，将去掉数组后以元素本身值对外输出，比如\n<br>[1]、['hello']、[true]，['']会被当做1、'hello'、true、''输出。长度大于1的\n<br>输入组，对外输出则是正常的数组值。"
            },
            {
              "attr": "_equalTo",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "默认勾选时，为判断是否相等；没勾选时，为判断是否不相等。",
              "dynamicCreate": true
            },
            {
              "attr": "_target",
              "valueType": "Object",
              "description": "用于判断比较的目标值。",
              "dynamicCreate": true
            },
            {
              "attr": "_falseReturn",
              "valueType": "Object",
              "defaultValue": false,
              "description": "判断失败时的返回值，默认为false。注意，默认勾选_equalTo时，判断是否相等；没勾选时，判断是否不相等。",
              "dynamicCreate": true
            },
            {
              "attr": "_trueReturn",
              "valueType": "Object",
              "defaultValue": true,
              "description": "判断成功时的返回值，默认为true。注意，默认勾选_equalTo时，判断是否相等；没勾选时，判断是否不相等。",
              "dynamicCreate": true
            },
            {
              "attr": "delay",
              "valueType": "PositiveNumber",
              "defaultValue": 0,
              "name": "延时执行毫秒"
            },
            {
              "attr": "exec",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "执行"
            },
            {
              "attr": "arrExec",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "遍历执行",
              "description": "准输出值如果是数组时，自动拆成多个元素，依次对外触发。\n<br>相当于在连线静态值bindControlsVal中依次填入从0到n-1后，\n<br>再点击常规“执行”。\n<br>对于透明传递而言，通常输出就等于输入，因此也相当于将\n<br>输入的多个参数（数组元素），依次填入再触发执行。\n<br>"
            },
            {
              "attr": "whenOutputing",
              "valueType": "MultiComboBox",
              "name": "whenOutputing"
            },
            {
              "attr": "changeOutputTo",
              "valueType": "MultiComboBox",
              "extraInfo": {
                "enum": {
                  "values": [
                    "不转换",
                    "空对象（null）",
                    "未定义（undefined）",
                    "空字符串（\"\"）",
                    "否（false）",
                    "等于零（0）"
                  ]
                }
              },
              "defaultValue": "不转换",
              "name": "changeOutputTo"
            },
            {
              "attr": "output",
              "valueType": "Object",
              "name": "输出",
              "description": "函数输出。\n<br>当函数执行、遍历执行或输入赋值执行时，函数输出，\n<br>如果有对外连线，则会触发将输出值传递出去。\n<br>如果函数所在页面作为内嵌，将继承到上层的输出属\n<br>性对外连线对外，那么内嵌函数的执行，同样会触发\n<br>上层对外连线传递值。\n<br>注意，不论是当前层还是嵌套层，所有对工具函数输\n<br>出属性的直接赋值，只会改变属性值本身，不会触发\n<br>连线操作对外传递，只有通过前面说的几种函数本身\n<br>的执行操作才会触发连线操作。\n<br>"
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "bindControls"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node, oldVal, form, type, inner) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              }
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "description": "用户数据。"
            },
            {
              "attr": "onOutput",
              "valueType": "Function",
              "description": "输出事件。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value"
                ]
              }
            },
            {
              "attr": "_bindEvents_0",
              "valueType": "MultiComboBox",
              "defaultValue": "*",
              "group": "bindEvents",
              "description": "连线索引[0]的触发事件过滤器，默认全部通过",
              "dynamicCreate": true
            },
            {
              "attr": "_bindEvents_1",
              "valueType": "MultiComboBox",
              "defaultValue": "*",
              "group": "bindEvents",
              "description": "连线索引[1]的触发事件过滤器，默认全部通过",
              "dynamicCreate": true
            }
          ],
          "renderHTML": "__ht__function(data, gv, cache) {return __convertor(data,gv,cache);}",
          "width": 45,
          "height": 45,
          "comps": [
            {
              "type": "image",
              "color": {
                "func": "__ht__function(data, view) {\nlet color = data.ca('color');\r\ndata.s('label.color',color);\r\nreturn color;\n}",
                "value": "rgb(51,153,255)"
              },
              "name": "symbols/develop/uiotos/icons/editroToolBar/function.json",
              "shadowColor": "rgb(61,61,61)",
              "displayName": "node_image",
              "rect": [
                0.53882,
                1.04528,
                43.92236,
                42.90945
              ]
            }
          ],
          "uuid": "42EAF8F9-8127-4518-861A-D2E258D2E2D6"
        },
        "position": {
          "x": 858.73053,
          "y": 448.64637
        }
      },
      "s": {
        "label.offset.y": 0,
        "interactive": true,
        "image.stretch": "uniform",
        "2d.editable": false,
        "select.width": 0.5,
        "select.type": "roundRect",
        "select.color": "rgb(124,145,155)",
        "label": "是否点击“删除”操作",
        "label.font": "26px Microsoft YaHei",
        "label.color": "rgb(51,153,255)",
        "label.align": "left",
        "label.position": 3
      },
      "a": {
        "toolTipRaw": "透明传递<br>transfer",
        "noteTips": "是否点击“删除”操作",
        "bindEvents": [
          "*",
          "onOutput"
        ],
        "输出遇到空值": "全部（*）",
        "输出遇到空值-list": [
          "全部（*）",
          "空对象（null）",
          "未定义（undefined）",
          "空字符串（\"\"）",
          "否（false）",
          "等于零（0）",
          "小于零（<0）",
          "NaN"
        ],
        "arrExec": false,
        "symbol": "symbols/develop/uiotos/base/__convertor.json",
        "function": "isEqual",
        "oldDynamicAttrs": [
          {
            "attr": "_equalTo",
            "valueType": "Boolean",
            "defaultValue": true,
            "description": "默认勾选时，为判断是否相等；没勾选时，为判断是否不相等。",
            "dynamicCreate": true
          },
          {
            "attr": "_target",
            "valueType": "Object",
            "description": "用于判断比较的目标值。",
            "dynamicCreate": true
          },
          {
            "attr": "_falseReturn",
            "valueType": "Object",
            "defaultValue": false,
            "description": "判断失败时的返回值，默认为false。注意，默认勾选_equalTo时，判断是否相等；没勾选时，判断是否不相等。",
            "dynamicCreate": true
          },
          {
            "attr": "_trueReturn",
            "valueType": "Object",
            "defaultValue": true,
            "description": "判断成功时的返回值，默认为true。注意，默认勾选_equalTo时，判断是否相等；没勾选时，判断是否不相等。",
            "dynamicCreate": true
          },
          {
            "attr": "_bindEvents_0",
            "valueType": "MultiComboBox",
            "defaultValue": "*",
            "group": "bindEvents",
            "description": "连线索引[0]的触发事件过滤器，默认全部通过",
            "dynamicCreate": true
          },
          {
            "attr": "_bindEvents_1",
            "valueType": "MultiComboBox",
            "defaultValue": "*",
            "group": "bindEvents",
            "description": "连线索引[1]的触发事件过滤器，默认全部通过",
            "dynamicCreate": true
          },
          {
            "attr": "_bindEvents_2",
            "valueType": "MultiComboBox",
            "defaultValue": "*",
            "group": "bindEvents",
            "description": "连线索引[2]的触发事件过滤器，默认全部通过",
            "dynamicCreate": true
          },
          {
            "attr": "_bindEvents_2",
            "valueType": "MultiComboBox",
            "defaultValue": "*",
            "group": "bindEvents",
            "description": "连线索引[2]的触发事件过滤器，默认全部通过",
            "dynamicCreate": true
          }
        ],
        "_target": "删除",
        "exeWhenInput": true,
        "resetAfterInput": true,
        "inputs": [],
        "output": false,
        "exec": false,
        "paramControlTag": [
          null,
          null
        ],
        "paramControlAttr": [
          "_target",
          "output"
        ],
        "bindControlsTag": [
          "输出",
          "输出"
        ],
        "bindControlsAttr": [
          "inputs",
          "exec"
        ],
        "bindControlsVal": [
          null,
          null
        ],
        "_bindEvents_0-list": [
          "*",
          "onOutput"
        ],
        "_bindEvents_1-list": [
          "*",
          "onOutput"
        ]
      }
    },
    {
      "c": "ht.Edge",
      "i": 63070,
      "p": {
        "name": "edge",
        "displayName": "0",
        "toolTip": "<div id=\"config_tooltip\" style=\"font-size:12px;line-height:1.75em;letter-spacing:1px\">\n                                                        关联绑定信息：<br>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5);\">索引序号：0 | 总共2条</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">操作属性：inputs@输出</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前值：</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold\">关联属性：_target@判断</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关联值：删除</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">解析赋值：null</li>\n                                                    </div>",
        "parent": {
          "__i": 55483
        },
        "tag": "edge3",
        "source": {
          "__i": 55483
        },
        "target": {
          "__i": 55486
        }
      },
      "s": {
        "label": "",
        "edge.color": "#313F5C",
        "edge.type": "flex",
        "edge.gap": 16,
        "edge.width.absolute": true,
        "note.border.width": 0,
        "note.position": 7,
        "note.opacity": 0.85,
        "note.background": "#313F5C",
        "note.offset.x": 0,
        "note.offset.y": 0,
        "icons": {
          "symbols/demo/extra/basic/fromArrow2.json": {
            "position": 15,
            "keepOrien": true,
            "names": [
              "symbols/demo/extra/basic/fromArrow2.json"
            ]
          },
          "symbols/demo/extra/basic/toArrow.json": {
            "position": 19,
            "keepOrien": true,
            "width": 50,
            "height": 20,
            "names": [
              "symbols/demo/extra/basic/toArrow.json"
            ]
          }
        },
        "note": 0
      },
      "a": {
        "index": 0,
        "toolTipRaw": "<div id=\"config_tooltip\" style=\"font-size:12px;line-height:1.75em;letter-spacing:1px\">\n                                                        关联绑定信息：<br>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5);\">索引序号：0 | 总共2条</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">操作属性：inputs@输出</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前值：</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold\">关联属性：_target@判断</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关联值：删除</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">解析赋值：null</li>\n                                                    </div>"
      }
    },
    {
      "c": "ht.Edge",
      "i": 63071,
      "p": {
        "name": "edge",
        "displayName": "1",
        "toolTip": "<div id=\"config_tooltip\" style=\"font-size:12px;line-height:1.75em;letter-spacing:1px\">\n                                                        关联绑定信息：<br>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5);\">索引序号：1 | 总共2条</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">操作属性：exec@输出</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前值：false</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold\">关联属性：output@判断</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关联值：false</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">解析赋值：null</li>\n                                                    </div>",
        "parent": {
          "__i": 55483
        },
        "tag": "edge4",
        "source": {
          "__i": 55483
        },
        "target": {
          "__i": 55486
        }
      },
      "s": {
        "label": "",
        "edge.color": "#1973C3",
        "edge.type": "flex",
        "edge.gap": 16,
        "edge.width.absolute": true,
        "note.border.width": 0,
        "note.position": 7,
        "note.opacity": 0.85,
        "note.background": "#1973C3",
        "note.offset.x": 0,
        "note.offset.y": 0,
        "icons": {
          "symbols/demo/extra/basic/fromArrow2.json": {
            "position": 15,
            "keepOrien": true,
            "names": [
              "symbols/demo/extra/basic/fromArrow2.json"
            ]
          },
          "symbols/demo/extra/basic/toArrow.json": {
            "position": 19,
            "keepOrien": true,
            "width": 50,
            "height": 20,
            "names": [
              "symbols/demo/extra/basic/toArrow.json"
            ]
          }
        },
        "note": 1
      },
      "a": {
        "index": 1,
        "toolTipRaw": "<div id=\"config_tooltip\" style=\"font-size:12px;line-height:1.75em;letter-spacing:1px\">\n                                                        关联绑定信息：<br>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5);\">索引序号：1 | 总共2条</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">操作属性：exec@输出</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前值：false</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold\">关联属性：output@判断</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关联值：false</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">解析赋值：null</li>\n                                                    </div>"
      }
    },
    {
      "c": "ht.Node",
      "i": 55484,
      "p": {
        "name": "func",
        "displayName": "工具函数（输入）",
        "toolTip": "透明传递<br>transfer",
        "tag": "输入",
        "dataBindings": {
          "a": {
            "userData": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "output": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "inputs": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        console.error(222222222,rawData)\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}",
              "alias": ""
            },
            "exec": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "arrExec": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onOutput": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "fields": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "keyId": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "keyParent": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "keyChildren": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "appendTo": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_bindEvents_0": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Mon Nov 06 2023 22:33:27 GMT+0800 (中国标准时间)",
          "background": "rgb(32,37,46)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image",
              "name": "组件地址"
            },
            {
              "attr": "color",
              "valueType": "Color",
              "defaultValue": "rgb(51,153,255)",
              "description": "图标颜色。\n<br>包括显示文字。",
              "group": "功能（关键）",
              "name": "图标颜色"
            },
            {
              "attr": "function",
              "valueType": "ToolFunction",
              "defaultValue": "transfer",
              "name": "功能选项",
              "description": "无"
            },
            {
              "attr": "noteTips",
              "valueType": "Multiline",
              "name": "文字显示注释",
              "description": "简短文字注释。\n<br>默认为函数名称，可以修改，方便理解具体用途。\n<br>通常结合“提示”属性，整体来注释当前的操作。"
            },
            {
              "attr": "exeWhenInput",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "输入赋值时执行"
            },
            {
              "attr": "resetAfterInput",
              "valueType": "Boolean",
              "name": "输入赋值后清空",
              "description": "勾选后，每次输入值有更新，在触发下一步（如果有勾选输入时执行）后，同时复位清空输入属性\n的值，确保下一次再输入同样内容时也能按照变化处理触发执行。注意，再多条连线操作inputs输入\n的不同索引index时，该属性不能勾选，否则无法实现多个值连线（异步先后）赋值传入。",
              "defaultValue": false
            },
            {
              "attr": "inputsArrToObj",
              "valueType": "Boolean",
              "name": "输入数组转对象",
              "description": "是否切换成对象格式。\n<br>输入组（inputs）默认为数组格式，当前属性勾选时\n<br>会将输入组切换成非数组的对象格式，再次取消勾选\n<br>时，会恢复成数组格式。\n<br>\n切换成对象，主要是为了连线操作时，能对初始的非\n<br>数组属性值进行操作，这对于数组取自身索引值对外\n<br>赋值时有用，否则会因为操作数组类型属性值，导致\n<br>被识别为操作目标数组的索引进行赋值。"
            },
            {
              "attr": "exeWhenLoad",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "组件加载时执行"
            },
            {
              "attr": "oldValueMerge",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "输出合并非覆盖",
              "description": "对被操作的属性值做追加而不是覆盖替换。\n<br>被操作属性值作为旧值，按照值类型（数值、字符串、数组、对象等）追加分为以下\n<br>情况：\n<br>1）如果被赋值的（要操作的旧值）为数组类型，通常会将当前值追加过去而不是覆盖；\n<br>工具函数的输入组（inputs）属性例外，在旧值为空数组或者长度为1的数组时，会被当\n<br>做空值或者以唯一哪个元素的值作为当前的旧值，不当做数组类型的操作来追加。\n<br>2）被赋值的为空（注意，并非0、空字符串等\"空\"值）时，输入（组）中一个或多个输\n<br>入项，会合并成一个值输出。其中，合并取决于输入组的类型（输入组多个值中类型数\n<br>量最多的被认为是当前输入组的值类型），具体如下:\n<br>    ■ 数字：输入组各项强制转换成数值并相加，将结果输出；\n<br>    ■ 字符串：输入组各项转成字符串依次拼接形成新的字符串输出；\n<br>    ■ 布尔型：输入组的各项转换成布尔然后做并集（或）后逻辑结果输出；\n<br>    ■ 对象：输入组各项被当成对象，然后字段合并成新对象后输出；\n<br>强制转换这里需注意：\n<br>    ■ 非空字符串转数值时，除了\"true\"（大小写均可）会作为1，其他字符串会作为0；\n<br>3）被赋值的不为空，有具体类型时，比如数字、字符串、布尔、对象类型，此时输入\n<br>组各项值，不再按照类型的多数（如果存在多个输入项）来强制转换少数输入项，而是\n<br>统一按照操作赋值的旧值类型，来转换输入的各项，并且按照类型类自动选择合适的合\n<br>并方式（如上），生成结果来赋值。\n<br>    ○ 注意1：多项输入和旧值会参与一起做合并操作，并非仅仅输入组的各项之间进行。\n<br>    ○ 注意2：如果输入值并非数组，会作当成输入组且元素个数为1的情况来处理。"
            },
            {
              "attr": "inputs",
              "valueType": "ObjectArray",
              "name": "输入（组）",
              "defaultValue": [],
              "description": "用于接收函数参数输入，默认为数组格式，可以设置多个入参。\n<br>外部可以多条连线操作该属性，利用数组操作特性，在各自的连线操作\n<br>中bindControlsVal中设置对应的索引值，用来指定传入输入数组中指定\n<br>值，实现多参数传入。\n<br>\n注意，对于透明传递不做任何业务逻辑处理时，默认会将输入组的值直接输\n<br>出，默认以空（undefined）对外操作赋值，通常用于对外清空值。\n<br>此外，输入组长度为1时，将去掉数组后以元素本身值对外输出，比如\n<br>[1]、['hello']、[true]，['']会被当做1、'hello'、true、''输出。长度大于1的\n<br>输入组，对外输出则是正常的数组值。"
            },
            {
              "attr": "_equalTo",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "默认勾选时，为判断是否相等；没勾选时，为判断是否不相等。",
              "dynamicCreate": true
            },
            {
              "attr": "_target",
              "valueType": "Object",
              "description": "用于判断比较的目标值。",
              "dynamicCreate": true
            },
            {
              "attr": "_falseReturn",
              "valueType": "Object",
              "defaultValue": false,
              "description": "判断失败时的返回值，默认为false。注意，默认勾选_equalTo时，判断是否相等；没勾选时，判断是否不相等。",
              "dynamicCreate": true
            },
            {
              "attr": "_trueReturn",
              "valueType": "Object",
              "defaultValue": true,
              "description": "判断成功时的返回值，默认为true。注意，默认勾选_equalTo时，判断是否相等；没勾选时，判断是否不相等。",
              "dynamicCreate": true
            },
            {
              "attr": "delay",
              "valueType": "PositiveNumber",
              "defaultValue": 0,
              "name": "延时执行毫秒"
            },
            {
              "attr": "exec",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "执行"
            },
            {
              "attr": "arrExec",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "遍历执行",
              "description": "准输出值如果是数组时，自动拆成多个元素，依次对外触发。\n<br>相当于在连线静态值bindControlsVal中依次填入从0到n-1后，\n<br>再点击常规“执行”。\n<br>对于透明传递而言，通常输出就等于输入，因此也相当于将\n<br>输入的多个参数（数组元素），依次填入再触发执行。\n<br>"
            },
            {
              "attr": "whenOutputing",
              "valueType": "MultiComboBox",
              "name": "whenOutputing"
            },
            {
              "attr": "changeOutputTo",
              "valueType": "MultiComboBox",
              "extraInfo": {
                "enum": {
                  "values": [
                    "不转换",
                    "空对象（null）",
                    "未定义（undefined）",
                    "空字符串（\"\"）",
                    "否（false）",
                    "等于零（0）"
                  ]
                }
              },
              "defaultValue": "不转换",
              "name": "changeOutputTo"
            },
            {
              "attr": "output",
              "valueType": "Object",
              "name": "输出",
              "description": "函数输出。\n<br>当函数执行、遍历执行或输入赋值执行时，函数输出，\n<br>如果有对外连线，则会触发将输出值传递出去。\n<br>如果函数所在页面作为内嵌，将继承到上层的输出属\n<br>性对外连线对外，那么内嵌函数的执行，同样会触发\n<br>上层对外连线传递值。\n<br>注意，不论是当前层还是嵌套层，所有对工具函数输\n<br>出属性的直接赋值，只会改变属性值本身，不会触发\n<br>连线操作对外传递，只有通过前面说的几种函数本身\n<br>的执行操作才会触发连线操作。\n<br>"
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "bindControls"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node, oldVal, form, type, inner) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              }
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "description": "用户数据。"
            },
            {
              "attr": "onOutput",
              "valueType": "Function",
              "description": "输出事件。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value"
                ]
              }
            },
            {
              "attr": "_bindEvents_0",
              "valueType": "MultiComboBox",
              "defaultValue": "*",
              "group": "bindEvents",
              "description": "连线索引[0]的触发事件过滤器，默认全部通过",
              "dynamicCreate": true
            }
          ],
          "renderHTML": "__ht__function(data, gv, cache) {return __convertor(data,gv,cache);}",
          "width": 45,
          "height": 45,
          "comps": [
            {
              "type": "image",
              "color": {
                "func": "__ht__function(data, view) {\nlet color = data.ca('color');\r\ndata.s('label.color',color);\r\nreturn color;\n}",
                "value": "rgb(51,153,255)"
              },
              "name": "symbols/develop/uiotos/icons/editroToolBar/function.json",
              "shadowColor": "rgb(61,61,61)",
              "displayName": "node_image",
              "rect": [
                0.53882,
                1.04528,
                43.92236,
                42.90945
              ]
            }
          ],
          "uuid": "42EAF8F9-8127-4518-861A-D2E258D2E2D6"
        },
        "position": {
          "x": 858.73053,
          "y": 333.95076
        }
      },
      "s": {
        "label.position": 3,
        "label.offset.y": 0,
        "interactive": true,
        "image.stretch": "uniform",
        "2d.editable": false,
        "select.width": 0.5,
        "select.type": "roundRect",
        "select.color": "rgb(124,145,155)",
        "label": "传入树表操作点击事件\nonLastButtonClicked",
        "label.font": "26px Microsoft YaHei",
        "label.color": "rgb(51,153,255)",
        "label.align": "left"
      },
      "a": {
        "toolTipRaw": "透明传递<br>transfer",
        "noteTips": "传入树表操作点击事件\nonLastButtonClicked",
        "bindEvents": [
          "*",
          "onOutput"
        ],
        "输出遇到空值": "全部（*）",
        "输出遇到空值-list": [
          "全部（*）",
          "空对象（null）",
          "未定义（undefined）",
          "空字符串（\"\"）",
          "否（false）",
          "等于零（0）",
          "小于零（<0）",
          "NaN"
        ],
        "arrExec": false,
        "symbol": "symbols/develop/uiotos/base/__convertor.json",
        "paramControlTag": [
          null
        ],
        "paramControlAttr": [
          "output"
        ],
        "bindControlsTag": [
          "判断"
        ],
        "bindControlsAttr": [
          "inputs"
        ],
        "bindControlsVal": [
          "a:currentClicked.button.text"
        ],
        "oldDynamicAttrs": [
          {
            "attr": "fields",
            "valueType": "ObjectArray",
            "defaultValue": [
              "name"
            ],
            "description": "数据字段。\n                    <br>选择返回数组数据（结构为[{},{}]）元素中的指\n                    <br>定字段，用于下拉框展示或对应表格字段。\n                    <br>注意，因为查询返回转树表和查询返回转下拉组框\n                    <br>复用了相同动态属性配置，而对于fields字段前者\n                    <br>要求数组、后者要求字符串即可，但为了兼容，因\n                    <br>此统一用数组。因此，下拉框的fields属性保持数\n                    <br>组格式，通常只需要一个元数、指定一个字段的列\n                    <br>表给组合框即可。\n                    <br>注意，当直接操作树表格的datas属性时，当下会\n                    <br>自动将本属性fields的值经过右移一位后传递给树\n                    <br>表的columnFields属性，比如[\"name\",\"gender\",\n                    <br>\"phone\"] → [null,\"name\",\"gender\",\"phone\"]，\n                    <br>无需连线操作，为了获取行数据时有字段对应，方便\n                    <br>直接对表单初始化。该机制对于嵌套暴露到上层的属\n                    <br>性操作也同样适用。",
            "dynamicCreate": true
          },
          {
            "attr": "keyId",
            "valueType": "String",
            "defaultValue": "id",
            "description": "下拉框显示对应的value值或树表的ID字段，对应返回数据的字段，默认为字段名称为\"id\"。",
            "dynamicCreate": true
          },
          {
            "attr": "keyParent",
            "valueType": "String",
            "defaultValue": "parent",
            "description": "父节点（以ID字段的值关联）字段，对应返回数据的字段，默认为字段名称为\"parent\"。",
            "dynamicCreate": true
          },
          {
            "attr": "keyChildren",
            "valueType": "String",
            "defaultValue": "children",
            "description": "子节点（以ID字段的值关联）字段，对应返回数据的字段，默认为字段名称为\"children\"。",
            "dynamicCreate": true
          },
          {
            "attr": "appendTo",
            "valueType": "String",
            "defaultValue": "",
            "description": "追加到指定节点（ID值）\r\n。如果有指定ID，并且在被操作的属性原数据中存在，那么就会将传入\r\n的数据动态插入到指定节点下，作为子节点数据，并且保持原始数据其他部分不变，不会被覆盖。\r\n注意，目前只对树表实现，对下拉框组件暂未支持。",
            "dynamicCreate": true
          },
          {
            "attr": "_bindEvents_0",
            "valueType": "MultiComboBox",
            "defaultValue": "*",
            "group": "bindEvents",
            "description": "连线索引[0]的触发事件过滤器，默认全部通过",
            "dynamicCreate": true
          }
        ],
        "exeWhenInput": true,
        "resetAfterInput": true,
        "function": "transfer",
        "inputs": [],
        "exec": false,
        "output": 22323233,
        "_bindEvents_0-list": [
          "*",
          "onOutput"
        ]
      }
    },
    {
      "c": "ht.Edge",
      "i": 151849,
      "p": {
        "name": "edge",
        "displayName": "0",
        "toolTip": "<div id=\"config_tooltip\" style=\"font-size:12px;line-height:1.75em;letter-spacing:1px\">\n                                                        关联绑定信息：<br>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5);\">索引序号：0 | 总共1条</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">操作属性：inputs@判断</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前值：</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold\">关联属性：output@输入</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关联值：22323233</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">解析赋值：a:currentClicked.button.text</li>\n                                                    </div>",
        "parent": {
          "__i": 55484
        },
        "tag": "edge6'",
        "source": {
          "__i": 55484
        },
        "target": {
          "__i": 55483
        }
      },
      "s": {
        "label": "",
        "edge.color": "#E255A3",
        "edge.type": "flex",
        "edge.gap": 16,
        "edge.width.absolute": true,
        "note.border.width": 0,
        "note.position": 7,
        "note.opacity": 0.85,
        "note.background": "#E255A3",
        "note.offset.x": 0,
        "note.offset.y": 0,
        "icons": {
          "symbols/demo/extra/basic/fromArrow2.json": {
            "position": 15,
            "keepOrien": true,
            "names": [
              "symbols/demo/extra/basic/fromArrow2.json"
            ]
          },
          "symbols/demo/extra/basic/toArrow.json": {
            "position": 19,
            "keepOrien": true,
            "width": 50,
            "height": 20,
            "names": [
              "symbols/demo/extra/basic/toArrow.json"
            ]
          }
        },
        "note": 0
      },
      "a": {
        "index": 0,
        "toolTipRaw": "<div id=\"config_tooltip\" style=\"font-size:12px;line-height:1.75em;letter-spacing:1px\">\n                                                        关联绑定信息：<br>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5);\">索引序号：0 | 总共1条</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">操作属性：inputs@判断</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前值：</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold\">关联属性：output@输入</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关联值：22323233</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">解析赋值：a:currentClicked.button.text</li>\n                                                    </div>"
      }
    },
    {
      "c": "ht.Node",
      "i": 55486,
      "p": {
        "name": "func",
        "displayName": "工具函数（输出）",
        "toolTip": "透明传递<br>transfer",
        "tag": "输出",
        "dataBindings": {
          "a": {
            "userData": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "output": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "inputs": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        console.error(i.ify(rawData))\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}",
              "alias": ""
            },
            "exec": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "arrExec": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onOutput": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_target": {
              "id": "iotos.form",
              "alias": "",
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            },
            "noteTips": {
              "id": "iotos.form",
              "alias": "",
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            },
            "_equalTo": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_falseReturn": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_trueReturn": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Mon Nov 06 2023 22:33:27 GMT+0800 (中国标准时间)",
          "background": "rgb(32,37,46)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image",
              "name": "组件地址"
            },
            {
              "attr": "color",
              "valueType": "Color",
              "defaultValue": "rgb(51,153,255)",
              "description": "图标颜色。\n<br>包括显示文字。",
              "group": "功能（关键）",
              "name": "图标颜色"
            },
            {
              "attr": "function",
              "valueType": "ToolFunction",
              "defaultValue": "transfer",
              "name": "功能选项",
              "description": "无"
            },
            {
              "attr": "noteTips",
              "valueType": "Multiline",
              "name": "文字显示注释",
              "description": "简短文字注释。\n<br>默认为函数名称，可以修改，方便理解具体用途。\n<br>通常结合“提示”属性，整体来注释当前的操作。"
            },
            {
              "attr": "exeWhenInput",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "输入赋值时执行"
            },
            {
              "attr": "resetAfterInput",
              "valueType": "Boolean",
              "name": "输入赋值后清空",
              "description": "勾选后，每次输入值有更新，在触发下一步（如果有勾选输入时执行）后，同时复位清空输入属性\n的值，确保下一次再输入同样内容时也能按照变化处理触发执行。注意，再多条连线操作inputs输入\n的不同索引index时，该属性不能勾选，否则无法实现多个值连线（异步先后）赋值传入。",
              "defaultValue": false
            },
            {
              "attr": "inputsArrToObj",
              "valueType": "Boolean",
              "name": "输入数组转对象",
              "description": "是否切换成对象格式。\n<br>输入组（inputs）默认为数组格式，当前属性勾选时\n<br>会将输入组切换成非数组的对象格式，再次取消勾选\n<br>时，会恢复成数组格式。\n<br>\n切换成对象，主要是为了连线操作时，能对初始的非\n<br>数组属性值进行操作，这对于数组取自身索引值对外\n<br>赋值时有用，否则会因为操作数组类型属性值，导致\n<br>被识别为操作目标数组的索引进行赋值。"
            },
            {
              "attr": "exeWhenLoad",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "组件加载时执行"
            },
            {
              "attr": "oldValueMerge",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "输出合并非覆盖",
              "description": "对被操作的属性值做追加而不是覆盖替换。\n<br>被操作属性值作为旧值，按照值类型（数值、字符串、数组、对象等）追加分为以下\n<br>情况：\n<br>1）如果被赋值的（要操作的旧值）为数组类型，通常会将当前值追加过去而不是覆盖；\n<br>工具函数的输入组（inputs）属性例外，在旧值为空数组或者长度为1的数组时，会被当\n<br>做空值或者以唯一哪个元素的值作为当前的旧值，不当做数组类型的操作来追加。\n<br>2）被赋值的为空（注意，并非0、空字符串等\"空\"值）时，输入（组）中一个或多个输\n<br>入项，会合并成一个值输出。其中，合并取决于输入组的类型（输入组多个值中类型数\n<br>量最多的被认为是当前输入组的值类型），具体如下:\n<br>    ■ 数字：输入组各项强制转换成数值并相加，将结果输出；\n<br>    ■ 字符串：输入组各项转成字符串依次拼接形成新的字符串输出；\n<br>    ■ 布尔型：输入组的各项转换成布尔然后做并集（或）后逻辑结果输出；\n<br>    ■ 对象：输入组各项被当成对象，然后字段合并成新对象后输出；\n<br>强制转换这里需注意：\n<br>    ■ 非空字符串转数值时，除了\"true\"（大小写均可）会作为1，其他字符串会作为0；\n<br>3）被赋值的不为空，有具体类型时，比如数字、字符串、布尔、对象类型，此时输入\n<br>组各项值，不再按照类型的多数（如果存在多个输入项）来强制转换少数输入项，而是\n<br>统一按照操作赋值的旧值类型，来转换输入的各项，并且按照类型类自动选择合适的合\n<br>并方式（如上），生成结果来赋值。\n<br>    ○ 注意1：多项输入和旧值会参与一起做合并操作，并非仅仅输入组的各项之间进行。\n<br>    ○ 注意2：如果输入值并非数组，会作当成输入组且元素个数为1的情况来处理。"
            },
            {
              "attr": "inputs",
              "valueType": "ObjectArray",
              "name": "输入（组）",
              "defaultValue": [],
              "description": "用于接收函数参数输入，默认为数组格式，可以设置多个入参。\n<br>外部可以多条连线操作该属性，利用数组操作特性，在各自的连线操作\n<br>中bindControlsVal中设置对应的索引值，用来指定传入输入数组中指定\n<br>值，实现多参数传入。\n<br>\n注意，对于透明传递不做任何业务逻辑处理时，默认会将输入组的值直接输\n<br>出，默认以空（undefined）对外操作赋值，通常用于对外清空值。\n<br>此外，输入组长度为1时，将去掉数组后以元素本身值对外输出，比如\n<br>[1]、['hello']、[true]，['']会被当做1、'hello'、true、''输出。长度大于1的\n<br>输入组，对外输出则是正常的数组值。"
            },
            {
              "attr": "_equalTo",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "默认勾选时，为判断是否相等；没勾选时，为判断是否不相等。",
              "dynamicCreate": true
            },
            {
              "attr": "_target",
              "valueType": "Object",
              "description": "用于判断比较的目标值。",
              "dynamicCreate": true
            },
            {
              "attr": "_falseReturn",
              "valueType": "Object",
              "defaultValue": false,
              "description": "判断失败时的返回值，默认为false。注意，默认勾选_equalTo时，判断是否相等；没勾选时，判断是否不相等。",
              "dynamicCreate": true
            },
            {
              "attr": "_trueReturn",
              "valueType": "Object",
              "defaultValue": true,
              "description": "判断成功时的返回值，默认为true。注意，默认勾选_equalTo时，判断是否相等；没勾选时，判断是否不相等。",
              "dynamicCreate": true
            },
            {
              "attr": "delay",
              "valueType": "PositiveNumber",
              "defaultValue": 0,
              "name": "延时执行毫秒"
            },
            {
              "attr": "exec",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "执行"
            },
            {
              "attr": "arrExec",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "遍历执行",
              "description": "准输出值如果是数组时，自动拆成多个元素，依次对外触发。\n<br>相当于在连线静态值bindControlsVal中依次填入从0到n-1后，\n<br>再点击常规“执行”。\n<br>对于透明传递而言，通常输出就等于输入，因此也相当于将\n<br>输入的多个参数（数组元素），依次填入再触发执行。\n<br>"
            },
            {
              "attr": "whenOutputing",
              "valueType": "MultiComboBox",
              "name": "whenOutputing"
            },
            {
              "attr": "changeOutputTo",
              "valueType": "MultiComboBox",
              "extraInfo": {
                "enum": {
                  "values": [
                    "不转换",
                    "空对象（null）",
                    "未定义（undefined）",
                    "空字符串（\"\"）",
                    "否（false）",
                    "等于零（0）"
                  ]
                }
              },
              "defaultValue": "不转换",
              "name": "changeOutputTo"
            },
            {
              "attr": "output",
              "valueType": "Object",
              "name": "输出",
              "description": "函数输出。\n<br>当函数执行、遍历执行或输入赋值执行时，函数输出，\n<br>如果有对外连线，则会触发将输出值传递出去。\n<br>如果函数所在页面作为内嵌，将继承到上层的输出属\n<br>性对外连线对外，那么内嵌函数的执行，同样会触发\n<br>上层对外连线传递值。\n<br>注意，不论是当前层还是嵌套层，所有对工具函数输\n<br>出属性的直接赋值，只会改变属性值本身，不会触发\n<br>连线操作对外传递，只有通过前面说的几种函数本身\n<br>的执行操作才会触发连线操作。\n<br>"
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "bindControls"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node, oldVal, form, type, inner) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              }
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "description": "用户数据。"
            },
            {
              "attr": "onOutput",
              "valueType": "Function",
              "description": "输出事件。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value"
                ]
              }
            },
            {
              "attr": "_bindEvents_0",
              "valueType": "MultiComboBox",
              "defaultValue": "*",
              "group": "bindEvents",
              "description": "连线索引[0]的触发事件过滤器，默认全部通过",
              "dynamicCreate": true
            }
          ],
          "renderHTML": "__ht__function(data, gv, cache) {return __convertor(data,gv,cache);}",
          "width": 45,
          "height": 45,
          "comps": [
            {
              "type": "image",
              "color": {
                "func": "__ht__function(data, view) {\nlet color = data.ca('color');\r\ndata.s('label.color',color);\r\nreturn color;\n}",
                "value": "rgb(51,153,255)"
              },
              "name": "symbols/develop/uiotos/icons/editroToolBar/function.json",
              "shadowColor": "rgb(61,61,61)",
              "displayName": "node_image",
              "rect": [
                0.53882,
                1.04528,
                43.92236,
                42.90945
              ]
            }
          ],
          "uuid": "42EAF8F9-8127-4518-861A-D2E258D2E2D6"
        },
        "position": {
          "x": 858.73053,
          "y": 539.9398
        }
      },
      "s": {
        "label.offset.y": 0,
        "interactive": true,
        "image.stretch": "uniform",
        "2d.editable": false,
        "select.width": 0.5,
        "select.type": "roundRect",
        "select.color": "rgb(124,145,155)",
        "label": "判断是则输出",
        "label.font": "26px Microsoft YaHei",
        "label.color": "rgb(51,153,255)",
        "label.align": "left"
      },
      "a": {
        "toolTipRaw": "透明传递<br>transfer",
        "noteTips": "判断是则输出",
        "bindEvents": [
          "*",
          "onOutput"
        ],
        "输出遇到空值": "全部（*）",
        "输出遇到空值-list": [
          "全部（*）",
          "空对象（null）",
          "未定义（undefined）",
          "空字符串（\"\"）",
          "否（false）",
          "等于零（0）",
          "小于零（<0）",
          "NaN"
        ],
        "arrExec": false,
        "symbol": "symbols/develop/uiotos/base/__convertor.json",
        "function": "isEqual",
        "oldDynamicAttrs": [
          {
            "attr": "_equalTo",
            "valueType": "Boolean",
            "defaultValue": true,
            "description": "默认勾选时，为判断是否相等；没勾选时，为判断是否不相等。",
            "dynamicCreate": true
          },
          {
            "attr": "_target",
            "valueType": "Object",
            "description": "用于判断比较的目标值。",
            "dynamicCreate": true
          },
          {
            "attr": "_falseReturn",
            "valueType": "Object",
            "defaultValue": false,
            "description": "判断失败时的返回值，默认为false。注意，默认勾选_equalTo时，判断是否相等；没勾选时，判断是否不相等。",
            "dynamicCreate": true
          },
          {
            "attr": "_trueReturn",
            "valueType": "Object",
            "defaultValue": true,
            "description": "判断成功时的返回值，默认为true。注意，默认勾选_equalTo时，判断是否相等；没勾选时，判断是否不相等。",
            "dynamicCreate": true
          }
        ],
        "_target": "删除",
        "exeWhenInput": false,
        "resetAfterInput": true,
        "inputs": [],
        "output": false,
        "exec": false
      }
    }
  ],
  "modified": "Tue Nov 07 2023 06:56:05 GMT+0800 (中国标准时间)",
  "contentRect": {
    "x": 726.73053,
    "y": 244.44295,
    "width": 264,
    "height": 351.50076
  }
}