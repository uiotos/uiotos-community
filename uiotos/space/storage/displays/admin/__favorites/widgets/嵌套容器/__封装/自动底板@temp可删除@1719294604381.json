{
  "v": "8.0.1",
  "p": {
    "autoAdjustIndex": true,
    "hierarchicalRendering": false
  },
  "a": {
    "rotateAsClock": false,
    "gridAngle": 1.5708,
    "connectActionType": null,
    "fitContent": false
  },
  "d": [
    {
      "c": "ht.Node",
      "i": 511680,
      "p": {
        "name": "autoBase",
        "displayName": "自动底板（autoBase1）",
        "tag": "autoBase1",
        "image": null,
        "position": {
          "x": -5,
          "y": -5
        },
        "width": 184,
        "height": 39
      },
      "s": {
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "2d.movable": false,
        "interactive": true,
        "fullscreen": "fill"
      }
    },
    {
      "c": "ht.Node",
      "i": 511681,
      "p": {
        "name": "cbox",
        "displayName": "下拉框（cbox1）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>",
        "tag": "cbox1",
        "dataBindings": {
          "a": {
            "datas": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "value": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "alias": ""
            },
            "onChange": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onOpened": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "defaultIndex": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "selectedID": {
              "id": "iotos.formValue",
              "idinfo": "",
              "isTplBinded": false,
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "alias": "../id"
            },
            "selectedText": {
              "id": "iotos.formValue",
              "idinfo": "",
              "isTplBinded": false,
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "alias": "../text"
            },
            "open": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "readOnly": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "disabled": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "pureTipText": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popDirection": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBackground": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popPadding": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popHeight": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderColor": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderRadius": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popTriggerEvent": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_bindEvents_0": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Fri Jun 07 2024 10:18:58 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image",
              "name": "symbol"
            },
            {
              "attr": "reset",
              "valueType": "Level2",
              "defaultValue": 0,
              "group": "功能",
              "name": "reset"
            },
            {
              "attr": "open",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "展开下拉。",
              "name": "open"
            },
            {
              "attr": "readOnly",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "readOnly"
            },
            {
              "attr": "disabled",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "禁止下拉。\n<br>通常作为“只读（readOnly）”属性的补充，勾选后，会自动\n<br>强制设置为只读，并且无法下拉选择。单独只勾选只读属性\n<br>时，用户无法输入编辑，但是可以下拉选择。\n<br>对于表单页面的查看模式下，下拉框通常需要勾选该属性，\n<br>无需手动再勾选只读属性。",
              "name": "disabled"
            },
            {
              "attr": "nodeUsable",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "勾选后，树列表节点双击可选中。\n<br>不勾选，树列表节点双击不可选中，而是展开下级。",
              "name": "nodeUsable"
            },
            {
              "attr": "hasNoneItem",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "有空选项。",
              "name": "hasNoneItem"
            },
            {
              "attr": "datas",
              "valueType": "Object",
              "defaultValue": [
                {
                  "name": "Button",
                  "children": [
                    {
                      "name": "ToggleButton",
                      "children": [
                        {
                          "name": "CheckBox",
                          "_parentId": "ToggleButton"
                        },
                        {
                          "name": "RadioButton",
                          "_parentId": "ToggleButton"
                        }
                      ],
                      "_parentId": "Button"
                    },
                    {
                      "name": "MenuButton",
                      "_parentId": "Button"
                    }
                  ]
                },
                {
                  "name": "TextField",
                  "children": [
                    {
                      "name": "ComboBox",
                      "_parentId": "TextField"
                    },
                    {
                      "name": "NumberInput",
                      "_parentId": "TextField"
                    }
                  ]
                }
              ],
              "description": "数据源。\n<br>下拉列表的数据格式，可以是基本列表比如：\n<br>['星期一' , '星期二' , '星期三' ]这样的结构。\n<br>也可以是对象列表，其中需要有name、value\n<br>两个字段，分别用于作为显示名称和数据ID，\n<br>其中value字段的值可以是字符串、数字等类型：\n<br>[{\n<br>        \"name\": \"不限\",\n<br>        \"value\": \"\"\n<br>    },{\n<br>        \"name\": \"故障\",\n<br>        \"value\": \"fault\"\n<br>    },{\n<br>        \"name\": \"报警\",\n<br>        \"value\": \"alarm\"\n<br>}]",
              "group": "数据",
              "name": "datas"
            },
            {
              "attr": "value",
              "valueType": "Object",
              "description": "选中值。\n<br>通常结合选中ID（selectedID）和选中名称（selectedText）\n<br>属性使用。可以是对象、ID数字、或者显示字符串，将自动\n<br>识别匹配格式。\n<br>如果是对象并且带有name、value字段时，会自动同步属性\n<br>selectedID和selectedText。\n<br>此外，下拉框数据源为普通列表比如['a','b','c','d']时，这里设\n<br>定value值需要再列表字符串中存在，或者如果设定值是数字\n<br>或数字的字符串，那么对应的列表索引需要存在，此时会自\n<br>动转成列表对应的项作为值。\n<br>下拉框数据源为对象结构的列表时，允许value设定值在列表\n<br>对象中不存在，保持显示。\n<br>注意，如果value值为undefined或null时，相当于复位，value\n<br>属性值则取决于defaultIndex属性确定的默认显示项。\n<br>如果传入空字符串\"\"，不等同于复位，会直接清空显示。如果\n<br>数据源有配置值为空字符串的\"\"，那么按照配置的name字段显\n<br>示，通常源自空信息属性noneInfo配置，索引为1的如果配置\n<br>是空字符串\"\"，那么索引为0的文字将被用于显示。",
              "defaultValue": "",
              "name": "value"
            },
            {
              "attr": "noDatasKeepVal",
              "valueType": "Boolean",
              "description": "value属性值是否在datas数据为空时保持。\n<br>默认勾选，当datas属性为空数组时，对value属性\n<br>任意设置值时，会被自动清空；当不勾选时，则会\n<br>保留value中非空属性值，即便此时下拉列表为空。",
              "defaultValue": true,
              "name": "noDatasKeepVal"
            },
            {
              "attr": "selectedID",
              "valueType": "Object",
              "description": "选中ID。\n<br>当前选中的项对应的ID值。当写入时，与在value属性中\n<br>设置ID值效果等同。注意，如果下拉框内容是文字列表，\n<br>那么这里ID就是序号。设置ID与在value属性中设置效果\n<br>等同。",
              "defaultValue": -1,
              "name": "selectedID"
            },
            {
              "attr": "selectedText",
              "valueType": "Object",
              "description": "选中名称。\n<br>当前选中的项对应的名称文字。注意，在树形结构中，由于\n<br>不同层级显示文字可以重复，此时会默认以一个匹配项作为\n<br>选中。简单列表结构则一般不会有重复显示。设置时与value\n<br>属性中设置的效果等同。",
              "defaultValue": "",
              "name": "selectedText"
            },
            {
              "attr": "defaultIndex",
              "valueType": "Int",
              "defaultValue": 0,
              "description": "默认显示下拉列表中指定的索引项。\n<br>当前显示的下拉项，索引从0开始计数，指定索引的项用于默认\n<br>显示。与值（value）、ID（selectedID）、文字（selectedText）\n<br>等几个属性的设置会相互同步。\n<br>注意，如果有勾选空选项（hasNoneItem），那么索引0就对应\n<br>空选项的内容，此前datas属性配置的数据第一项将被视作索引1。\n<br>",
              "name": "defaultIndex"
            },
            {
              "attr": "noneInfo",
              "valueType": "ObjectArray",
              "defaultValue": [
                "无",
                -1,
                ""
              ],
              "description": "空选项配置。\n<br>当勾选了“有空选项”（hasNoneItem）时，当前属性配置生效。\n<br>- 数组索引0用于配置空选项的显示文字，为第一个下拉选项。\n<br>- 数组索引1对应选择空时，选中ID（selectedID）的属性值。\n<br>- 数组索引2则对应选中值（value）。\n<br>注意，动态配置索引1和索引2，通常用于下拉选择空时，对外\n<br>连线赋值清空，结合“清空时”（onEmpty）事件。该事件属于\n<br>\"变化时\"（onChange）事件的子集，因此也可以直接用“变化\n<br>时”（onChange）事件，结合当前属性来对外做重置清空。",
              "name": "noneInfo"
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray",
              "name": "userData"
            },
            {
              "attr": "allowChoosing",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "content",
                  "item"
                ]
              },
              "description": "可否选中的过滤函数。\n<br>参数content为对象，字段datas为属性datas的内容，\n<br>字段value为值（如果数据项是对象，那么就是对象内\n<br>的value字段值；如果数据项不是对象，那么就等同于\n<br>数据项）。\n<br>参数item为对象结构的值，显示字段为名称，值字段\n<br>为id。\n<br>函数返回true时，当前项能选中，否则不能选中。",
              "name": "allowChoosing"
            },
            {
              "attr": "fixedHeight",
              "valueType": "PositiveNumber",
              "defaultValue": 35,
              "group": "外观",
              "name": "fixedHeight"
            },
            {
              "attr": "background",
              "valueType": "Color",
              "description": "背景色",
              "name": "background"
            },
            {
              "attr": "activeReadOnlyBackground",
              "valueType": "Color",
              "defaultValue": "rgb(247,247,247)",
              "description": "只读时默认背景色。",
              "name": "activeReadOnlyBackground"
            },
            {
              "attr": "hoverReadOnlyBackground",
              "valueType": "Color",
              "defaultValue": "rgb(247,247,247)",
              "description": "只读滑过时背景色。",
              "name": "hoverReadOnlyBackground"
            },
            {
              "attr": "hoverIcon",
              "valueType": "Color",
              "description": "悬停时的图标。",
              "name": "hoverIcon"
            },
            {
              "attr": "font",
              "valueType": "Font",
              "description": "字体。",
              "name": "font"
            },
            {
              "attr": "color",
              "valueType": "Color",
              "description": "文本颜色。",
              "name": "color"
            },
            {
              "attr": "borderRadius",
              "valueType": "Number",
              "defaultValue": 3,
              "name": "borderRadius"
            },
            {
              "attr": "borderWidth",
              "valueType": "Number",
              "defaultValue": 1,
              "name": "borderWidth"
            },
            {
              "attr": "activeBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,153,255)",
              "description": "点击时的边框颜色。",
              "name": "activeBorderColor"
            },
            {
              "attr": "borderColor",
              "valueType": "Color",
              "defaultValue": "rgb(213,213,213)",
              "description": "默认时的边框颜色。",
              "name": "borderColor"
            },
            {
              "attr": "placeholder",
              "valueType": "String",
              "defaultValue": "关键词",
              "name": "placeholder"
            },
            {
              "attr": "labelColor",
              "valueType": "Color",
              "defaultValue": "rgb(0,0,0)",
              "name": "labelColor"
            },
            {
              "attr": "labelText",
              "valueType": "String",
              "defaultValue": "下拉框",
              "name": "labelText"
            },
            {
              "attr": "gap",
              "valueType": "PositiveNumber",
              "defaultValue": 15,
              "name": "gap"
            },
            {
              "attr": "layoutVertical",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "layoutVertical"
            },
            {
              "attr": "labelEmbeded",
              "valueType": "Boolean",
              "name": "labelEmbeded"
            },
            {
              "attr": "treeBoxShadow",
              "valueType": "String",
              "defaultValue": "0px 8px 22px rgba(0,0,0,0.1)",
              "description": "",
              "name": "treeBoxShadow"
            },
            {
              "attr": "treeBackground",
              "valueType": "Color",
              "defaultValue": "rgb(255,255,255)",
              "description": "展开下拉的背景色。",
              "name": "treeBackground"
            },
            {
              "attr": "treeLabelColor",
              "valueType": "Color",
              "defaultValue": "rgb(61,61,61)",
              "description": "展开下拉的文本颜色。",
              "name": "treeLabelColor"
            },
            {
              "attr": "treeHoverLabelColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,153,255)",
              "description": "展开下拉，鼠标悬停时的文本颜色。",
              "name": "treeHoverLabelColor"
            },
            {
              "attr": "treeSelectLabelColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,153,255)",
              "description": "展开下拉，选中时的文本颜色。",
              "name": "treeSelectLabelColor"
            },
            {
              "attr": "treeLabelFont",
              "valueType": "Font",
              "defaultValue": "12px sans-serif, Arial",
              "description": "树列表的字体。",
              "name": "treeLabelFont"
            },
            {
              "attr": "treeRowHeight",
              "valueType": "PositiveNumber",
              "defaultValue": 25,
              "description": "树列表 行高",
              "name": "treeRowHeight"
            },
            {
              "attr": "treeRowLineColor",
              "valueType": "Color",
              "defaultValue": "rgb(247,247,247)",
              "description": "树列表 行线颜色",
              "name": "treeRowLineColor"
            },
            {
              "attr": "treeRowBackground",
              "valueType": "Color",
              "defaultValue": "rgb(255,255,255)",
              "description": "树列表 行背景色",
              "name": "treeRowBackground"
            },
            {
              "attr": "treeSelectRowBackground",
              "valueType": "Color",
              "defaultValue": "rgb(247,247,247)",
              "description": "树列表 选中时的行背景色。",
              "name": "treeSelectRowBackground"
            },
            {
              "attr": "treeFocusRowBackground",
              "valueType": "Color",
              "defaultValue": "rgb(247,247,247)",
              "name": "treeFocusRowBackground"
            },
            {
              "attr": "treeBorderWidth",
              "valueType": "PositiveNumber",
              "defaultValue": 0,
              "description": "树列表边框宽度。",
              "name": "treeBorderWidth"
            },
            {
              "attr": "treeBorderColor",
              "valueType": "Color",
              "description": "树列表边框颜色。",
              "name": "treeBorderColor"
            },
            {
              "attr": "treeBorderRadius",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                0,
                0,
                0
              ],
              "description": "树列表边框圆角半径。",
              "name": "treeBorderRadius"
            },
            {
              "attr": "treePadding",
              "valueType": "NumberArray",
              "defaultValue": [
                5,
                0,
                5,
                0
              ],
              "name": "treePadding"
            },
            {
              "attr": "onOpened",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "group": "事件",
              "description": "勾选后，当下拉时就对外触发。",
              "name": "onOpened"
            },
            {
              "attr": "onChange",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "name": "onChange"
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "连线",
              "name": "bindControlsTag"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray",
              "name": "bindControlsAttr"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。",
              "name": "bindControlsVal"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray",
              "name": "paramControlTag"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray",
              "name": "paramControlAttr"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node,oldVal,form,type,inner) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              },
              "name": "paramsGenerator"
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "连线操作和处理回写是否一致。\n                        比如多个文本框连线传值给相同对话框，弹窗修改\n                        后是否限定只能写到最新赋值过来的文本框。详见<a href='https://www.yuque.com/liuhuo-nc809/uiotos/fgi6dd7gado51acm#fFUbp' style=\"color:rgb(96,172,252)\"target=\"_blank\">同源属性操作</a>",
              "name": "useAttrCORS",
              "dynamicCreate": true
            },
            {
              "attr": "display",
              "valueType": "Image",
              "defaultValue": "",
              "description": "自定义页面地址。\n                可以是编辑器中的其他页面，也可以\n                是外部网页链接地址。",
              "group": "弹出框",
              "name": "display",
              "dynamicCreate": true
            },
            {
              "attr": "pureTipText",
              "valueType": "String",
              "defaultValue": "",
              "description": "提示文字。\n                    当专业用户属性中，提供display内嵌页属性，\n                    如果有配置，那么本属性设置无效，将以内嵌\n                    页显示为准。",
              "group": "弹出框",
              "name": "pureTipText",
              "dynamicCreate": true
            },
            {
              "attr": "popDirection",
              "valueType": "SideDirection",
              "defaultValue": "right",
              "description": "提示显示位置。",
              "group": "弹出框",
              "name": "popDirection",
              "dynamicCreate": true
            },
            {
              "attr": "popBackground",
              "valueType": "Color",
              "defaultValue": "white",
              "description": "箭头和背景色。",
              "group": "弹出框",
              "name": "popBackground",
              "dynamicCreate": true
            },
            {
              "attr": "popPadding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                2
              ],
              "description": "内间距。",
              "group": "弹出框",
              "name": "popPadding",
              "dynamicCreate": true
            },
            {
              "attr": "popWidth",
              "valueType": "Number",
              "defaultValue": 400,
              "description": "弹出框宽度。",
              "group": "弹出框",
              "name": "popWidth",
              "dynamicCreate": true
            },
            {
              "attr": "popHeight",
              "valueType": "Number",
              "defaultValue": 300,
              "description": "弹出框高度。",
              "group": "弹出框",
              "name": "popHeight",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,51,51)",
              "description": "边框线颜色。\n                    注意，是设置了边框宽度非0后的边框颜色。\n                    默认边框宽度属性为0时，实际上是白色并\n                    带有箭头指示的边框。本属性不用于修改默\n                    认边框色。",
              "group": "弹出框",
              "name": "popBorderColor",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线宽度。\n                    默认值为0，此时边框默认为白色并且带有\n                    箭头指示。当设置宽度后，颜色将取边框颜\n                    色属性的设置，并且不再有箭头指示。",
              "group": "弹出框",
              "name": "popBorderWidth",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderRadius",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线圆角。\n                    设置圆角线后，如果此前默认是白色边框带有\n                    指示箭头，那么将自动不可见，只对内容区域\n                    产生圆角。",
              "group": "弹出框",
              "name": "popBorderRadius",
              "dynamicCreate": true
            },
            {
              "attr": "popTriggerEvent",
              "valueType": "MouseEvent",
              "defaultValue": "hover",
              "description": "触发方式。\n                支持鼠标移入、点击（按钮时）\n                两种触发提示的方式。",
              "group": "弹出框",
              "name": "popTriggerEvent",
              "dynamicCreate": true
            },
            {
              "attr": "_bindEvents_0",
              "name": "连线事件_0",
              "valueType": "MultiComboBox",
              "defaultValue": "*",
              "group": "bindEvents",
              "description": "连线索引[0]的触发事件过滤器，默认全部通过",
              "dynamicCreate": true
            }
          ],
          "snapshotURL": "symbols/develop/uiotos/arranged/controls/forms_icon/下拉框.json",
          "renderHTML": "__ht__function(data, gv, cache) {return __combobox_ui(data,gv,cache);}",
          "width": 180,
          "height": 35,
          "fitSize": true,
          "scrollable": true,
          "interactive": true,
          "pixelPerfect": false,
          "comps": [],
          "uuid": "0203DB23-773C-4B1B-B57E-2C42E8272FAD"
        },
        "host": {
          "__i": 511680
        },
        "position": {
          "x": -5,
          "y": -5
        },
        "width": 180,
        "height": 35
      },
      "s": {
        "label.opacity": 1,
        "label": "下拉框",
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "interactive": true,
        "2d.movable": false,
        "layout.h": "leftright",
        "layout.v": "top"
      },
      "a": {
        "bindEvents": [
          "*",
          "onClick",
          "onChange",
          "onOpened",
          "onEmpty"
        ],
        "symbol": "symbols/develop/uiotos/arranged/controls/forms/05-下拉选择/下拉框.json",
        "labelText": "下拉框",
        "value": {
          "name": "Button",
          "children": [
            {
              "name": "ToggleButton",
              "children": [
                {
                  "name": "CheckBox",
                  "_parentId": "ToggleButton"
                },
                {
                  "name": "RadioButton",
                  "_parentId": "ToggleButton"
                }
              ],
              "_parentId": "Button"
            },
            {
              "name": "MenuButton",
              "_parentId": "Button"
            }
          ]
        },
        "gap": 0,
        "selectedID": "Button",
        "selectedText": "Button",
        "paramControlTag": [],
        "paramControlAttr": [],
        "bindControlsTag": [],
        "bindControlsAttr": [],
        "bindControlsVal": [],
        "_bindEvents_0-list": [
          "*",
          "onClick",
          "onChange",
          "onOpened",
          "onEmpty"
        ],
        "_bindEvents_0": "*",
        "paramBindEvent": [],
        "paramsGenerator": "function paramsGenerator(data, val, index, node, oldVal, form) {\r\n    //绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\n    switch (index) {\r\n        case 0:\r\n            break;\r\n        case 1:\r\n            break;\r\n        case 2:\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return val;\r\n}"
      }
    }
  ],
  "modified": "Tue Jun 25 2024 13:52:08 GMT+0800 (中国标准时间)",
  "contentRect": {
    "x": -161.70703,
    "y": -24.5,
    "width": 248.70703,
    "height": 39
  }
}