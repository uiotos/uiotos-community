{
  "v": "7.7.5",
  "p": {
    "autoAdjustIndex": true,
    "hierarchicalRendering": false
  },
  "a": {
    "rotateAsClock": false,
    "connectActionType": null
  },
  "d": [
    {
      "c": "ht.Node",
      "i": 132027,
      "p": {
        "name": "cbtn",
        "displayName": "图片按钮（cbtn3）",
        "toolTip": "源自图片按钮",
        "tag": "cbtn3",
        "dataBindings": {
          "a": {
            "_bindEvents_0": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Mon Mar 04 2024 19:23:58 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image"
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray",
              "group": "功能（关键）"
            },
            {
              "attr": "toolTip",
              "valueType": "Boolean",
              "description": "运行时提示是否可见。\n<br>默认编辑状态下非空内容的提示鼠标放在上面都可见，\n<br>需要勾选该属性运行模式下才可见。"
            },
            {
              "attr": "path",
              "valueType": "Image",
              "defaultValue": "symbols/develop/uiotos/icons/editroToolBar/edit.json",
              "name": "名称"
            },
            {
              "attr": "openUrl",
              "valueType": "String",
              "description": "浏览器地址。\n<br>运行模式下点击，会在浏览器新页签打开地址。"
            },
            {
              "attr": "hover-background",
              "valueType": "Color",
              "defaultValue": "rgb(51,153,255)",
              "name": "划过颜色"
            },
            {
              "attr": "iconType",
              "valueType": "Level",
              "defaultValue": 1,
              "name": "类型"
            },
            {
              "attr": "default-background",
              "valueType": "Color",
              "defaultValue": "rgb(55,125,255)",
              "name": "默认颜色"
            },
            {
              "attr": "clicked",
              "valueType": "Function",
              "name": "点击事件",
              "extraInfo": {
                "arguments": [
                  "data",
                  "param"
                ]
              }
            },
            {
              "attr": "param",
              "valueType": "Function",
              "name": "数据参数",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv"
                ]
              },
              "defaultValue": "__ht__function(data, gv) {return null;}"
            },
            {
              "attr": "disabled",
              "valueType": "Boolean"
            },
            {
              "attr": "click-background",
              "valueType": "Color",
              "defaultValue": "#60ACFC",
              "name": "按下颜色"
            },
            {
              "attr": "bindTabview",
              "valueType": "StringArray",
              "defaultValue": [
                "tab1",
                -1
              ],
              "group": "bindControls"
            },
            {
              "attr": "bindControlsTag",
              "valueType": "ObjectArray"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "ObjectArray"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node,oldVal,form) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form"
                ]
              }
            },
            {
              "attr": "_bindEvents_0",
              "valueType": "MultiComboBox",
              "defaultValue": "*",
              "group": "bindEvents",
              "description": "连线索引[0]的触发事件过滤器，默认全部通过",
              "dynamicCreate": true
            }
          ],
          "snapshotURL": "icon.base.iconClick",
          "onDown": "__ht__function(event, data, view, point, width, height) {\n!data.ca('disabled') && data.ca('icon-background',data.ca('click-background'))\n}",
          "onUp": "__ht__function(event, data, view, point, width, height) {\nif(!data.ca('disabled')){\r\n    data.ca('icon-background',data.ca('hover-background'));\r\n    let cb = new Function('return ' + data.ca('clicked'))();\r\n    typeof(setBindTabviewIndex) != 'undefined' && setBindTabviewIndex(data,data.ca('bindTabview'));\r\n    let paramCb = new Function('return ' + data.ca('param'))();\r\n    let param = paramCb ? paramCb(data,view) : null;\r\n    if(typeof(i) != 'undefined' && typeof(i.updateBindControls) != 'undefined'){\r\n        //240304，需要改成i.formEventBubblingUpper，否则执行操作可能会出问题！比如tab页签索引切换，切换不了！\r\n        // i.updateBindControls(data,param,[],false,'~','clicked');//params是response的位置，所以得是对象类型\\\r\n        //触发事件连线操作\r\n        i.formEventBubblingUpper(\r\n            data,\r\n            data._gv,\r\n            data._cache,\r\n            'clicked',\r\n            null,\r\n            false\r\n        );\r\n    }\r\n    //230819，支持传入url，点击浏览器新窗口打开。\r\n    let urltmp = data.ca('openUrl');\r\n    if(urltmp && urltmp.indexOf('http') == -1) urltmp = 'http://' + urltmp;\r\n    urltmp && window.open(urltmp,'_blank');\r\n    return cb && cb(data,param)\r\n}\n}",
          "onEnter": "__ht__function(event, data, view, point, width, height) {\nif(data.ca('disabled')){\r\n    view.getView().style.cursor = 'not-allowed'\r\n}else{\r\n    data.ca('icon-background',data.ca('hover-background'))\r\n    data.iv();\r\n    view.getView().style.cursor = 'pointer'\r\n}\n}",
          "onLeave": "__ht__function(event, data, view, point, width, height) {\ndata.ca('icon-background',data.ca('default-background'))\r\nview.getView().style.cursor = 'default'\n}",
          "renderHTML": "__ht__function(data, gv, cache) {//对于提示组件，初始没有配置（undefined），那么自动勾选，允许运行时提示可见！\r\nif(data.getName() == 'tip' && data.ca('toolTip') === undefined){\r\n    data.ca('toolTip',true);\r\n    data.s('pixelPerfect',false);\r\n}\r\n//240304，发现iconButton图片按钮没有渲染元素代码实现，需要这里手动加\r\ndata._gv = gv;\r\ndata._cache = data.__cache = cache;\r\n\r\n/*240304，所以渲染元素最简，都需要加上这句调用，否则连线赋值时，判断\r\ni.hasInnerSymbolInited()识别渲染元素是否初始化就极可能识别判断失误！\r\n加上了这句，上面的data._gv、data._cache散装调用貌似可以去掉了，暂时\r\n不动，留着也无妨！*/\r\ncache = _i.innerRecoveredDataCache(data, cache);}",
          "width": 100,
          "height": 100,
          "comps": [
            {
              "type": "image",
              "color": null,
              "name": {
                "func": "__ht__function(data, view) {\nfunction func(data,view){\r\n    if((typeof(runningMode) != 'undefined' && !runningMode()) || view.getView().style.cursor != 'pointer'){//最好不用 == 'default'，因为存在代码初始赋值\r\n        data.ca('icon-background',data.ca('default-background'))\r\n    }\r\n    var typeArr = ['light','light','regular','light'] //枚举下拉选择\r\n    var typetmp = typeArr[data.ca('iconType')] //类型选择\r\n    var path = data.ca('path')                 //图标路径\r\n    if(path != undefined){\r\n        if(path.indexOf('.') == -1){           //传入图标文件名称时\r\n            path = 'symbols/demo/uiotos/icons/' + typetmp + '/' + path + '.json'\r\n        }else if(path.indexOf(typetmp) == -1){ //图标类型发生变化时\r\n            typeArr.forEach((curType,index)=>{\r\n                if(curType != typetmp){        //路径中先前的类型名称换成新的\r\n                    path = path.replace(curType,typetmp)               \r\n                }\r\n            })\r\n        }\r\n    }\r\n    data.ca('path',path)                      //回写过去\r\n    return path\r\n}\r\n\r\n//整体复制的话需要带上这句，因为属性func外层已经是函数体\r\nreturn func(data,view)\n}",
                "value": "symbols/demo/uiotos/icons/light/square-full.json"
              },
              "displayName": "democrat",
              "rect": [
                0,
                0,
                100,
                100
              ]
            }
          ],
          "uuid": "4AF0B28B-C20C-4615-8E8C-5BB95F354C03"
        },
        "position": {
          "x": 2202.10585,
          "y": -1054.98888
        },
        "width": 384.79645,
        "height": 215.73491
      },
      "s": {
        "label.opacity": 0,
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "interactive": true,
        "pixelPerfect": false,
        "fullscreen.gap": 0,
        "fullscreen": "fill"
      },
      "a": {
        "icon-background": "rgba(127,127,127,0.05)",
        "path": "symbols/develop/uiotos/common/pureRect.json",
        "hover-background": "rgba(51,153,255,0)",
        "default-background": "rgba(127,127,127,0.05)",
        "click-background": "rgba(51,153,255,0)",
        "bindControlsTag": [
          "func1"
        ],
        "bindControlsAttr": [
          "exec"
        ],
        "bindControlsVal": [
          null
        ],
        "paramControlTag": [
          null
        ],
        "paramControlAttr": [
          null
        ],
        "paramBindEvent": [],
        "paramsGenerator": "function paramsGenerator(data, val, index, node, oldVal, form) {\r\n    //绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\n    switch (index) {\r\n        case 0:\r\n            break;\r\n        case 1:\r\n            break;\r\n        case 2:\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return val;\r\n}",
        "symbol": "symbols/develop/uiotos/base/iconClick.json",
        "_bindEvents_0": "*"
      }
    },
    {
      "c": "ht.Edge",
      "i": 178607,
      "p": {
        "name": "edge",
        "displayName": "0",
        "toolTip": "<div id=\"config_tooltip\" style=\"font-size:12px;line-height:1.75em;letter-spacing:1px\">\n                                                        关联绑定信息：<br>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5);\">索引序号：0 | 总共1条</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">操作属性：exec@func1</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前值：false</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold\">关联属性：</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关联值：</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">解析赋值：null</li>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5)\">触发事件：*</li>\n                                                        <li style=\"list-style-type:disc;\">注释：无</li>\n                                                    </div>",
        "parent": {
          "__i": 132027
        },
        "tag": "edge2",
        "source": {
          "__i": 132027
        },
        "target": {
          "__i": 173905
        }
      },
      "s": {
        "label": "",
        "edge.color": "rgb(51,153,255)",
        "edge.width": 4,
        "edge.type": "flex",
        "edge.gap": 16,
        "note.border.width": 0,
        "note.position": 7,
        "note.font": "14px arial, sans-serif",
        "note.opacity": 0.75,
        "label.opacity": 0,
        "note.background": "rgb(51,153,255)",
        "note.offset.x": 0,
        "note.offset.y": 0,
        "icons": {
          "symbols/demo/extra/basic/fromArrow2.json": {
            "position": 15,
            "keepOrien": true,
            "names": [
              "symbols/demo/extra/basic/fromArrow2.json"
            ]
          },
          "symbols/demo/extra/basic/toArrow.json": {
            "position": 19,
            "keepOrien": true,
            "width": 50,
            "height": 20,
            "names": [
              "symbols/demo/extra/basic/toArrow.json"
            ]
          }
        },
        "note": 0
      },
      "a": {
        "index": 0,
        "toolTipRaw": "<div id=\"config_tooltip\" style=\"font-size:12px;line-height:1.75em;letter-spacing:1px\">\n                                                        关联绑定信息：<br>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5);\">索引序号：0 | 总共1条</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">操作属性：exec@func1</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前值：false</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold\">关联属性：</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关联值：</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">解析赋值：null</li>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5)\">触发事件：*</li>\n                                                        <li style=\"list-style-type:disc;\">注释：无</li>\n                                                    </div>"
      }
    },
    {
      "c": "ht.UNode",
      "i": 173905,
      "p": {
        "name": "func",
        "displayName": "工具函数（func1）",
        "toolTip": "透明传递<br>transfer",
        "tag": "func1",
        "dataBindings": {
          "a": {
            "userData": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "output": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "outputByEvent": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "inputs": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "exec": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "arrExec": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onOutput": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_type": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_title": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_region": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_duration": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_fixedWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_fixedHeight": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "convertFlatToTree": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "inputKeys": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "inputValues": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Mon Mar 11 2024 21:17:29 GMT+0800 (中国标准时间)",
          "background": "rgb(32,37,46)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image",
              "name": "组件地址"
            },
            {
              "attr": "color",
              "valueType": "Color",
              "defaultValue": "rgb(51,153,255)",
              "description": "图标颜色。\n<br>包括显示文字。",
              "group": "功能（关键）",
              "name": "图标颜色"
            },
            {
              "attr": "function",
              "valueType": "ToolFunction",
              "defaultValue": "transfer",
              "name": "功能选项",
              "description": "信息提示/警告/错误"
            },
            {
              "attr": "noteTips",
              "valueType": "Multiline",
              "name": "函数别名注释",
              "description": "函数别名注释。\n<br>默认为函数名称，可以修改，方便理解具体用途。\n<br>通常结合“提示”属性做详细功能注释，便于理解当\n<br>前配置下的操作。"
            },
            {
              "attr": "exeWhenInput",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "输入赋值时执行"
            },
            {
              "attr": "resetAfterInput",
              "valueType": "Boolean",
              "name": "输入赋值后清空",
              "description": "勾选后，每次输入值有更新，在触发下一步（如果有勾选输入时执行）后，同时复位清空输入属性\n的值，确保下一次再输入同样内容时也能按照变化处理触发执行。注意，再多条连线操作inputs输入\n的不同索引index时，该属性不能勾选，否则无法实现多个值连线（异步先后）赋值传入。",
              "defaultValue": false
            },
            {
              "attr": "inputsArrToObj",
              "valueType": "Boolean",
              "name": "输入数组转对象",
              "description": "是否切换成对象格式。\n<br>输入组（inputs）默认为数组格式，当前属性勾选时\n<br>会将输入组切换成非数组的对象格式，再次取消勾选\n<br>时，会恢复成数组格式。\n<br>\n切换成对象，主要是为了连线操作时，能对初始的非\n<br>数组属性值进行操作，这对于数组取自身索引值对外\n<br>赋值时有用，否则会因为操作数组类型属性值，导致\n<br>被识别为操作目标数组的索引进行赋值。",
              "defaultValue": true
            },
            {
              "attr": "stripSingleInput",
              "valueType": "Boolean",
              "defaultValue": true,
              "name": "输入组单个取出",
              "description": "输入组为数组且只有1个元素时，取出\n<br>这个元素作为实际输入值，代替原先的输入。默\n<br>认inputs为数组格式，手动输入时通常会在数组\n<br>的首元素输入，本属性保持默认勾选时，实际计\n<br>算会以首元素作为实际输入值。\n<br>也可以勾选“输入数组转对象”，此时输入组的属\n<br>性栏由数组切换为对象输入，就可以任意输入非\n<br>数组类型的值了。"
            },
            {
              "attr": "exeWhenLoad",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "组件加载时执行"
            },
            {
              "attr": "oldValueMerge",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "输出合并非覆盖",
              "description": "对被操作的属性值做追加而不是覆盖替换。\n<br>被操作属性值作为旧值，按照值类型（数值、字符串、数组、对象等）追加分为以下\n<br>情况：\n<br>1）如果被赋值的（要操作的旧值）为数组类型，通常会将当前值追加过去而不是覆盖。\n<br>注意，如果传入的新值（支持经由解析赋值）也是数组，那么区分情况：\n<br>    ■ 旧值为常规数组，新值也为数组，则新数组元素都追加到旧数组合成一个，而非整\n<br>体数组作为一个元素追加。此外注意，如果新数组内元素都为数组，即本身是数组的数\n<br>组，那么自身数组先合并成一个数组，再进行下一步与旧数组合并操作。\n<br>    ■ 旧值为数组的数组时，新值即便也为数组，那么也会整体作为一个元素追加到旧值。\n<br>2）被赋值的为空（注意，并非0、空字符串等\"空\"值）时，输入（组）中一个或多个输\n<br>入项，会合并成一个值输出。其中，合并取决于输入组的类型（输入组多个值中类型数\n<br>量最多的被认为是当前输入组的值类型），具体如下:\n<br>    ■ 数字：输入组各项强制转换成数值并相加，将结果输出；\n<br>    ■ 字符串：输入组各项转成字符串依次拼接形成新的字符串输出；\n<br>    ■ 布尔型：输入组的各项转换成布尔然后做并集（或）后逻辑结果输出；\n<br>    ■ 对象：输入组各项被当成对象，然后字段合并成新对象后输出；\n<br>强制转换这里需注意：\n<br>    ■ 非空字符串转数值时，除了\"true\"（大小写均可）会作为1，其他字符串会作为0；\n<br>3）被赋值的不为空，有具体类型时，比如数字、字符串、布尔、对象类型，此时输入\n<br>组各项值，不再按照类型的多数（如果存在多个输入项）来强制转换少数输入项，而是\n<br>统一按照操作赋值的旧值类型，来转换输入的各项，并且按照类型类自动选择合适的合\n<br>并方式（如上），生成结果来赋值。\n<br>    ○ 注意1：多项输入和旧值会参与一起做合并操作，并非仅仅输入组的各项之间进行。\n<br>    ○ 注意2：如果输入值并非数组，会作当成输入组且元素个数为1的情况来处理。"
            },
            {
              "attr": "outputByEvent",
              "valueType": "Boolean",
              "defaultValue": true,
              "name": "输出经事件返回",
              "description": "默认情况下输出事件onOutput跟常规事件一样，\n<br>会输出当前组件的表单对象，而不是具体某个属性值，\n<br>需要经过赋值解析提取（通常是属性名加上前缀'a:'）。\n<br>工具函数的输出output通常要从内嵌页面中传给上层，\n<br>为了简化操作，当勾选了本属性后，无需赋值解析，输\n<br>出onOutput事件会自动将输出属性（a:output）带出。\n<br>而无需再通过表单对象+解析，也无需两条连线前者关\n<br>联output输出、后者关联onOutput触发以省去赋值解析。\n<br>注意，不影响数据进一步的赋值解析，只是此时不再是\n<br>以表单对象为解析基础，而是以函数output的返回结果。"
            },
            {
              "attr": "parseFailedNull",
              "valueType": "Boolean",
              "defaultValue": true,
              "name": "输出解析默认空",
              "description": "解析赋值输出时，如果对象\n<br>没有匹配到的解析字段，就返回未定\n<br>义的空值（undefined）。如果不勾选\n<br>本属性，未匹配到的解析赋值（非静\n<br>态赋值情况下），则返回原对象本身。\n<br>通常有反向关联属性时，参数被当成\n<br>赋值解析参数而非静态值。"
            },
            {
              "attr": "inputs",
              "valueType": "Object",
              "name": "输入（组）",
              "defaultValue": {},
              "description": "用于接收函数参数输入，可默认对象或数组形式，可以设置多个入参。\n<br>外部可以多条连线操作该属性，利用数组操作特性，在各自的连线操作\n<br>中bindControlsVal中设置对应的索引值，用来指定传入输入数组中指定\n<br>值，实现多参数传入。\n<br>\n注意，对于透明传递不做任何业务逻辑处理时，默认会将输入组的值直接输\n<br>出，默认以空（undefined）对外操作赋值，通常用于对外清空值。\n<br>此外，输入组长度为1时，将去掉数组后以元素本身值对外输出，比如\n<br>[1]、['hello']、[true]，['']会被当做1、'hello'、true、''输出。长度大于1的\n<br>输入组，对外输出则是正常的数组值。"
            },
            {
              "attr": "convertFlatToTree",
              "valueType": "Boolean",
              "name": "输入扁平结构化",
              "defaultValue": false,
              "description": "JSON扁平化与结构化的对应通常如\n                        {a.b.0.c:10}与{a:{b:[{c:10}]}}。\n                        勾选后，如果输入键值组是扁平化形式，那么会将\n                        输入组数据转成结构化。\n                        注意，在输入键组（inputKeys）字段固定，试图\n                        在输入值组（inputValues）指定索引插入对象或\n                        数组结构时，一定要去掉本属性勾选，否则会自动\n                        将对象或数组扁平化展开，整个输入键值组都会被\n                        扁平化。",
              "dynamicCreate": true
            },
            {
              "attr": "inputKeys",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "name": "输入键组",
              "description": "输入组（inputs）扁平化后的键列表。\n<br>与数组值组配合使用，与输入组的数据实时双\n<br>向同步。",
              "dynamicCreate": true
            },
            {
              "attr": "inputValues",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "name": "输入值组",
              "description": "输入组（inputs）扁平化后的值列表。\n                        与输入键组配合使用，与输入组的数据实时双\n                        向同步。\n                        注意，数组赋值给本属性指定索引时需格外小\n                        心，因为有动态扁平化展开机制，会导致重复\n                        数组值赋值到指定索引结果表现为数组嵌套。\n                        建议用工具函数接受该操作获取完整的属性值\n                        后整体操作赋值给本属性。\n                        此外，当前属性不论是整体还是索引位置赋值\n                        都会出发输入时执行（如果有勾选），效果等\n                        同于连线操作输入组（inputs）属性。",
              "dynamicCreate": true
            },
            {
              "attr": "_type",
              "valueType": "MessageType",
              "defaultValue": "warn",
              "dynamicCreate": true
            },
            {
              "attr": "_title",
              "valueType": "String",
              "dynamicCreate": true
            },
            {
              "attr": "_region",
              "valueType": "Region",
              "defaultValue": "top",
              "dynamicCreate": true
            },
            {
              "attr": "_duration",
              "valueType": "PositiveNumber",
              "defaultValue": 1000,
              "dynamicCreate": true
            },
            {
              "attr": "_fixedWidth",
              "valueType": "PositiveNumber",
              "defaultValue": 300,
              "description": "提示区域宽度。\n                    提示条或对话框的宽度。。",
              "dynamicCreate": true
            },
            {
              "attr": "_fixedHeight",
              "valueType": "PositiveNumber",
              "defaultValue": 160,
              "description": "弹窗高度。\n                    注意，仅对弹窗确认选项有效。",
              "dynamicCreate": true
            },
            {
              "attr": "delay",
              "valueType": "PositiveNumber",
              "defaultValue": 0,
              "name": "延时执行毫秒"
            },
            {
              "attr": "exec",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "执行"
            },
            {
              "attr": "arrExec",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "遍历执行",
              "description": "数组循环遍历执行。\n<br>准输出值如果是数组时，自动拆成多\n<br>个元素，依次对外触发。相当于在连\n<br>线静态值bindControlsVal中依次填入\n<br>从0到n-1后，再点击常规“执行”。\n<br>对于透明传递而言，通常输出就等于\n<br>输入，因此也相当于将输入的多个参\n<br>数（数组元素），依次填入触发执行。"
            },
            {
              "attr": "whenOutputing",
              "valueType": "MultiComboBox",
              "name": "whenOutputing"
            },
            {
              "attr": "changeOutputTo",
              "valueType": "MultiComboBox",
              "extraInfo": {
                "enum": {
                  "values": [
                    "不转换",
                    "空对象（null）",
                    "未定义（undefined）",
                    "空字符串（\"\"）",
                    "否（false）",
                    "等于零（0）"
                  ]
                }
              },
              "defaultValue": "不转换",
              "name": "changeOutputTo"
            },
            {
              "attr": "output",
              "valueType": "Object",
              "name": "输出",
              "description": "函数输出。\n<br>当函数执行、遍历执行或输入赋值执行时，函数输出，\n<br>如果有对外连线，则会触发将输出值传递出去。\n<br>如果函数所在页面作为内嵌，将继承到上层的输出属\n<br>性对外连线对外，那么内嵌函数的执行，同样会触发\n<br>上层对外连线传递值。\n<br>注意，不论是当前层还是嵌套层，所有对工具函数输\n<br>出属性的直接赋值，只会改变属性值本身，不会触发\n<br>连线操作对外传递，只有通过前面说的几种函数本身\n<br>的执行操作才会触发连线操作。\n<br>"
            },
            {
              "attr": "bindControlsTag",
              "valueType": "ObjectArray",
              "group": "bindControls"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "ObjectArray"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。"
            },
            {
              "attr": "paramControlTag",
              "valueType": "ObjectArray"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "ObjectArray"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node, oldVal, form, type, inner) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              }
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "description": "用户数据。"
            },
            {
              "attr": "onOutput",
              "valueType": "Function",
              "description": "输出事件。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value"
                ]
              }
            }
          ],
          "renderHTML": "__ht__function(data, gv, cache) {return __convertor(data,gv,cache);}",
          "width": 45,
          "height": 40,
          "comps": [
            {
              "type": "image",
              "color": {
                "func": "__ht__function(data, view) {\nlet color = data.ca('color');\r\ndata.s('label.color',color);\r\nreturn color;\n}",
                "value": "rgb(51,153,255)"
              },
              "name": "symbols/develop/uiotos/icons/editroToolBar/function.json",
              "shadowColor": "rgb(61,61,61)",
              "displayName": "node_image",
              "rect": [
                0.53882,
                4.53779,
                43.92236,
                30.92443
              ]
            }
          ],
          "uuid": "41B220D9-D187-401B-A24C-CA482FFD1321"
        },
        "position": {
          "x": 2202.10585,
          "y": -1239.75586
        }
      },
      "s": {
        "label.position": 25,
        "label.offset.y": 0,
        "interactive": true,
        "image.stretch": "uniform",
        "2d.editable": false,
        "select.width": 0.5,
        "select.type": "roundRect",
        "select.color": "rgb(124,145,155)",
        "label": "信息提示/警告/错误",
        "label.font": "26px Microsoft YaHei",
        "label.color": "rgb(51,153,255)",
        "label.align": "left"
      },
      "a": {
        "toolTipRaw": "透明传递<br>transfer",
        "noteTips": "信息提示/警告/错误",
        "bindEvents": [
          "*",
          "onOutput"
        ],
        "输出遇到空值": "全部（*）",
        "输出遇到空值-list": [
          "全部（*）",
          "空对象（null）",
          "未定义（undefined）",
          "空字符串（\"\"）",
          "否（false）",
          "等于零（0）",
          "小于零（<0）",
          "NaN"
        ],
        "symbol": "symbols/develop/uiotos/base/__convertor.json",
        "icon": "symbols/develop/uiotos/icons/functions/function.json",
        "arrExec": false,
        "function": "messageAlert",
        "inputs": "当前点击的为透明遮盖层，并非实际组件！",
        "stripSingleInput": false,
        "inputKeys": [],
        "inputValues": []
      }
    }
  ],
  "modified": "Thu Mar 28 2024 21:49:25 GMT+0800 (中国标准时间)",
  "contentRect": {
    "x": 1973.02598,
    "y": -1261.9066,
    "width": 485.79666,
    "height": 314.78518
  }
}